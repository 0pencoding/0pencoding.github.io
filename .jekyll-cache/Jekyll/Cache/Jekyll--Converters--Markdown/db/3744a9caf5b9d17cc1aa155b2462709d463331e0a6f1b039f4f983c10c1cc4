I"[@<p>알고리즘 공부를 다시 시작했다. 프로그래머스 고득점 Kit에서 level2 문제를 딱 하나 못 풀었었는데, 그 문제가 바로 이 문제이다. 이번에 다시 풀면서 전에 세웠던 알고리즘을 뒤엎고 새로운 알고리즘으로 도전했는데 생각보다 금방 풀려서 맥이 풀렸다. 이전 알고리즘이 어디가 잘못됐는지는 여전히 모른채… 이전 알고리즘이 효율은 훨씬 좋은데, 해결되지 않은 이전 알고리즘 코드도 함께 올릴테니 아시는 분은 댓글 주시면 감사하겠습니다 ʕ ཀ ⌂ ཀ ʔ<br />
<br />
<br /></p>

<h2 id="1-문제">1. 문제</h2>

<p>일반적인 프린터는 인쇄 요청이 들어온 순서대로 인쇄합니다.<br />
그렇기 때문에 중요한 문서가 나중에 인쇄될 수 있습니다.<br />
이런 문제를 보완하기 위해 중요도가 높은 문서를 먼저 인쇄하는 프린터를 개발했습니다.<br />
이 새롭게 개발한 프린터는 아래와 같은 방식으로 인쇄 작업을 수행합니다.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
</pre></td><td class="rouge-code"><pre>1. 인쇄 대기목록의 가장 앞에 있는 문서(J)를 대기목록에서 꺼냅니다.
2. 나머지 인쇄 대기목록에서 J보다 중요도가 높은 문서가 한 개라도 존재하면 J를 대기목록의 가장 마지막에 넣습니다.
3. 그렇지 않으면 J를 인쇄합니다.
</pre></td></tr></tbody></table></code></pre></div></div>

<p>예를 들어, 4개의 문서(A, B, C, D)가 순서대로 인쇄 대기목록에 있고 중요도가 2 1 3 2 라면 C D A B 순으로 인쇄하게 됩니다.<br />
내가 인쇄를 요청한 문서가 몇 번째로 인쇄되는지 알고 싶습니다. 위의 예에서 C는 1번째로, A는 3번째로 인쇄됩니다.<br />
현재 대기목록에 있는 문서의 중요도가 순서대로 담긴 배열 priorities와 내가 인쇄를 요청한 문서가 현재 대기목록의 어떤 위치에 있는지를 알려주는 location이 매개변수로 주어질 때, 내가 인쇄를 요청한 문서가 몇 번째로 인쇄되는지 return 하도록 solution 함수를 작성해주세요.</p>

<h3 id="제한조건">제한조건</h3>

<ul>
  <li>현재 대기목록에는 1개 이상 100개 이하의 문서가 있습니다.</li>
  <li>인쇄 작업의 중요도는 1~9로 표현하며 숫자가 클수록 중요하다는 뜻입니다.</li>
  <li>location은 0 이상 (현재 대기목록에 있는 작업 수 - 1) 이하의 값을 가지며 대기목록의 가장 앞에 있으면 0, 두 번째에 있으면 1로 표현합니다.
<br /><br /><br /></li>
</ul>

<h2 id="2-알고리즘-생각해보자">2. 알고리즘! 생각해보자</h2>

<ol>
  <li>queue처럼 pop, push가 자유롭기 위해 priorities 벡터를 리스트로 복사해서 생성한다.<br />
(C++에도 queue가 있지만, max_element()를 사용하기 위해 리스트 사용)</li>
  <li>리스트의 최대값을 구하고, 맨 앞의 원소가 해당 최대값과 같은지 비교한다.</li>
  <li>같은 값이면, pop하고 answer를 증가시키고, pop한 값이 인쇄를 요청한 문서면 반복문을 멈추고 답을 리턴하고, 아니면 새로운 최대값을 구한다.<br />
(pop한 값이 인쇄를 요청한 문서인지 아닌지는 location변수가 0인지로 판단)</li>
  <li>같은 값이 아니면, pop하고 그 값을 뒤로 다시 push한다.</li>
  <li>맨 앞의 원소를 pop해주었기 때문에 location을 감소시킨다.</li>
  <li>위 과정을 계속해서 반복한다. (break가 될 때 까지)<br />
<br /><br /></li>
</ol>

<h2 id="3-해결코드">3. 해결코드</h2>

<h3 id="c">[C++]</h3>

<h4 id="초반-알고리즘으로-생각했던-코드-통과x">초반 알고리즘으로 생각했던 코드 (통과X)</h4>

<div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
</pre></td><td class="rouge-code"><pre><span class="cp">#include &lt;vector&gt;
</span>
<span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>

<span class="kt">int</span> <span class="nf">solution</span><span class="p">(</span><span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">priorities</span><span class="p">,</span> <span class="kt">int</span> <span class="n">location</span><span class="p">)</span> <span class="p">{</span>
    <span class="kt">int</span> <span class="n">priority</span> <span class="o">=</span> <span class="n">priorities</span><span class="p">[</span><span class="n">location</span><span class="p">];</span>
    <span class="kt">int</span> <span class="n">last_priority</span> <span class="o">=</span> <span class="mi">10</span><span class="p">;</span>
    <span class="kt">int</span> <span class="n">last_back_same</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
    <span class="kt">int</span> <span class="n">back_same</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
    <span class="kt">int</span> <span class="n">front_same</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
    <span class="kt">int</span> <span class="n">last_idx</span> <span class="o">=</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>
    <span class="kt">int</span> <span class="n">bigger</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
    <span class="kt">int</span> <span class="n">same</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>

    <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">priorities</span><span class="p">.</span><span class="n">size</span><span class="p">();</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">if</span> <span class="p">(</span><span class="n">i</span> <span class="o">&gt;</span> <span class="n">location</span> <span class="o">&amp;&amp;</span> <span class="n">priority</span> <span class="o">==</span> <span class="n">priorities</span><span class="p">[</span><span class="n">i</span><span class="p">])</span> <span class="n">back_same</span> <span class="o">++</span><span class="p">;</span>
        <span class="k">if</span> <span class="p">(</span><span class="n">i</span> <span class="o">&lt;</span> <span class="n">location</span> <span class="o">&amp;&amp;</span> <span class="n">priority</span> <span class="o">==</span> <span class="n">priorities</span><span class="p">[</span><span class="n">i</span><span class="p">])</span> <span class="n">front_same</span> <span class="o">++</span><span class="p">;</span>
        <span class="k">if</span> <span class="p">(</span><span class="n">priority</span> <span class="o">&lt;</span> <span class="n">priorities</span><span class="p">[</span><span class="n">i</span><span class="p">])</span> <span class="n">bigger</span> <span class="o">++</span><span class="p">;</span>
        <span class="k">if</span> <span class="p">(</span><span class="n">i</span> <span class="o">!=</span> <span class="n">location</span> <span class="o">&amp;&amp;</span> <span class="n">priority</span> <span class="o">==</span> <span class="n">priorities</span><span class="p">[</span><span class="n">i</span><span class="p">])</span> <span class="p">{</span>
            <span class="n">same</span> <span class="o">++</span><span class="p">;</span>
            <span class="n">last_back_same</span> <span class="o">++</span><span class="p">;</span>
        <span class="p">}</span>

        <span class="k">if</span> <span class="p">(</span><span class="n">priority</span> <span class="o">&lt;</span> <span class="n">priorities</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">&amp;&amp;</span> <span class="n">priorities</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">&lt;=</span> <span class="n">last_priority</span><span class="p">)</span> <span class="p">{</span>
            <span class="n">last_priority</span> <span class="o">=</span> <span class="n">priorities</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
            <span class="n">last_idx</span> <span class="o">=</span> <span class="n">i</span><span class="p">;</span>
            <span class="n">last_back_same</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
        <span class="p">}</span>
    <span class="p">}</span>

    <span class="k">if</span> <span class="p">(</span><span class="n">last_idx</span> <span class="o">&lt;</span> <span class="n">location</span><span class="p">)</span> <span class="k">return</span> <span class="n">bigger</span> <span class="o">+</span> <span class="n">last_back_same</span> <span class="o">-</span> <span class="n">back_same</span> <span class="o">+</span> <span class="mi">1</span><span class="p">;</span>
    <span class="k">return</span> <span class="n">bigger</span> <span class="o">+</span> <span class="n">front_same</span> <span class="o">+</span> <span class="n">last_back_same</span> <span class="o">+</span> <span class="mi">1</span><span class="p">;</span>
<span class="p">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p><br /></p>

<h4 id="뒤엎은-알고리즘으로-해결한-코드-통과-o">뒤엎은 알고리즘으로 해결한 코드 (통과 O)</h4>

<div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
</pre></td><td class="rouge-code"><pre><span class="cp">#include &lt;vector&gt;
#include &lt;algorithm&gt;
#include &lt;list&gt;
</span>
<span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>

<span class="kt">int</span> <span class="nf">solution</span><span class="p">(</span><span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">priorities</span><span class="p">,</span> <span class="kt">int</span> <span class="n">location</span><span class="p">)</span> <span class="p">{</span>
    <span class="n">list</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">ps</span> <span class="p">(</span><span class="n">priorities</span><span class="p">.</span><span class="n">begin</span><span class="p">(),</span> <span class="n">priorities</span><span class="p">.</span><span class="n">end</span><span class="p">());</span>
    <span class="kt">int</span> <span class="n">max</span><span class="p">;</span>
    <span class="kt">int</span> <span class="n">answer</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>

    <span class="n">max</span> <span class="o">=</span> <span class="o">*</span><span class="n">max_element</span><span class="p">(</span><span class="n">ps</span><span class="p">.</span><span class="n">begin</span><span class="p">(),</span> <span class="n">ps</span><span class="p">.</span><span class="n">end</span><span class="p">());</span>
    <span class="k">while</span><span class="p">(</span><span class="nb">true</span><span class="p">)</span> <span class="p">{</span>
        <span class="kt">int</span> <span class="n">front</span> <span class="o">=</span> <span class="n">ps</span><span class="p">.</span><span class="n">front</span><span class="p">();</span>
        <span class="k">if</span><span class="p">(</span><span class="n">max</span> <span class="o">!=</span> <span class="n">front</span><span class="p">)</span> <span class="p">{</span>
            <span class="n">ps</span><span class="p">.</span><span class="n">pop_front</span><span class="p">();</span>
            <span class="n">ps</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="n">front</span><span class="p">);</span>
        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
            <span class="n">ps</span><span class="p">.</span><span class="n">pop_front</span><span class="p">();</span>
            <span class="n">answer</span><span class="o">++</span><span class="p">;</span>

            <span class="k">if</span><span class="p">(</span><span class="n">location</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span> <span class="k">break</span><span class="p">;</span>
            <span class="n">max</span> <span class="o">=</span> <span class="o">*</span><span class="n">max_element</span><span class="p">(</span><span class="n">ps</span><span class="p">.</span><span class="n">begin</span><span class="p">(),</span> <span class="n">ps</span><span class="p">.</span><span class="n">end</span><span class="p">());</span>
        <span class="p">}</span>

        <span class="k">if</span><span class="p">(</span><span class="o">--</span><span class="n">location</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="p">)</span> <span class="n">location</span> <span class="o">=</span> <span class="n">ps</span><span class="p">.</span><span class="n">size</span><span class="p">()</span> <span class="o">-</span> <span class="mi">1</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="k">return</span> <span class="n">answer</span><span class="p">;</span>
<span class="p">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p><br /><br /></p>

<h2 id="4-해결능력up-깊이-생각해보기">4. 해결능력UP, 깊이 생각해보기</h2>

<ul>
  <li>vector에서 최대값 구하는 방법 (list에서 사용 가능)</li>
  <li>vector를 list로 변환하는 방법 (초기화 할 때)</li>
  <li>c++에도 queue가 있는데 최대값 구하는 것 때문에 list 사용</li>
  <li>한동안 문제를 풀지 않아서 그런지 c++이 어색… 계속해서 연습하자!
<br /><br /><br /></li>
</ul>

<h2 id="5-참고해서-문제해결-٩-ᐛ-و">5. 참고해서 문제해결 ٩( ᐛ )و</h2>

<ul>
  <li>[C++ 공식문서] std:queue:queue <a href="https://www.cplusplus.com/reference/queue/queue/queue/">https://www.cplusplus.com/reference/queue/queue/queue/</a></li>
  <li>[c++] 벡터(vector)에서 최대, 최소값 찾기 <a href="https://m.blog.naver.com/PostView.nhn?blogId=chansung0602&amp;logNo=221116097894&amp;proxyReferer=https:%2F%2Fwww.google.com%2F">https://m.blog.naver.com/PostView.nhn?blogId=chansung0602&amp;logNo=221116097894&amp;proxyReferer=https:%2F%2Fwww.google.com%2F</a>
    <blockquote>
      <ul>
        <li>vector에서 최대값은 <code class="language-plaintext highlighter-rouge">#include &lt;algorithm&gt;</code> 하고, <code class="language-plaintext highlighter-rouge">*max_element(vector&lt;&gt; vector 범위)</code> 를 사용 (list에서도 가능!)</li>
      </ul>
    </blockquote>
  </li>
  <li>Convert a vector to a list in C++ - <a href="https://www.techiedelight.com/convert-vector-list-cpp/">https://www.techiedelight.com/convert-vector-list-cpp/</a>
    <blockquote>
      <ul>
        <li>list를 vector 베이스로 초기화할 때 파라미터로 vector의 범위를 넣어 변환 가능</li>
      </ul>
    </blockquote>
  </li>
</ul>

<p><br /><br /><br /></p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
</pre></td><td class="rouge-code"><pre>출처: 프로그래머스 코딩 테스트 연습, https://programmers.co.kr/learn/challenges
</pre></td></tr></tbody></table></code></pre></div></div>
:ET