I"&<p>난이도 ★ ★ ★ ☆ ☆<br />
이 문제는 문제 풀면서 조금 짜증났던 문제였다. 처음에 문제를 읽고 알고리즘을 세우는 데에는 10분 가량?이었는데 세운 알고리즘대로 코드를 작성했더니 정확도가 60점이어서 왜 안되는지 이유를 몰라 30분 가량 이도저도 못하고 있었다. 그러다가 스터디 시간에 친구에게 왜 내 코드가 안되는지 모르겠다며 알고리즘을 설명해 주다가 깨달았고…^^ 코드를 한 줄만 더해주었더니 해결 되었다. 뭔가 허무하기도 했는데 정확한 이유를 깨닫고 그에 맞게 정확한 알고리즘을 세울 수 있어서 좋았다. 하지만 효율성은 마음에 들지 않는다 ^_^<br />
<br /></p>

<p><br /></p>

<h2 id="1-문제">1. 문제</h2>
<p>n명의 권투선수가 권투 대회에 참여했고 각각 1번부터 n번까지 번호를 받았습니다.<br />
권투 경기는 1대1 방식으로 진행이 되고, 만약 A 선수가 B 선수보다 실력이 좋다면 A 선수는 B 선수를 항상 이깁니다.<br />
심판은 주어진 경기 결과를 가지고 선수들의 순위를 매기려 합니다.<br />
하지만 몇몇 경기 결과를 분실하여 정확하게 순위를 매길 수 없습니다.</p>

<p>선수의 수 n, 경기 결과를 담은 2차원 배열 results가 매개변수로 주어질 때<br />
정확하게 순위를 매길 수 있는 선수의 수를 return 하도록 solution 함수를 작성해주세요.</p>

<h3 id="제한조건">제한조건</h3>
<ul>
  <li>선수의 수는 1명 이상 100명 이하입니다.</li>
  <li>경기 결과는 1개 이상 4,500개 이하입니다.</li>
  <li>results 배열 각 행 [A, B]는 A 선수가 B 선수를 이겼다는 의미입니다.</li>
  <li>모든 경기 결과에는 모순이 없습니다.
<br /><br /><br /></li>
</ul>

<h2 id="2-알고리즘-생각해보자">2. 알고리즘! 생각해보자</h2>
<ol>
  <li>각 선수가 이긴 선수와 진 선수의 번호를 나타내는 맵 win과 defeat을 생성한다.</li>
  <li>답을 나타내는 변수 answer 를 0으로 초기화하여 생성한다.</li>
  <li>매개변수로 받은 results를 각 win, defeat 맵에 초기화 시켜준다.</li>
  <li>초기화된 맵을 기반으로 각 선수의 이긴 선수와 진 선수를 모두 찾아준다.<br />
(1번 선수부터 n번 선수까지 win 맵을 돌면서 자신이 이긴 선수가 이긴 선수 또한 자신의 value 셋에 넣어준다.<br />
defeat 맵도 자신을 이긴 선수를 이긴 선수에게도 지기 때문에 마찬가지로 value 셋에 넣어준다.<br />
이 작업을 n-1번 반복하는 이유는 각 선수의 win, defeat 맵의 업데이트가 진행된 결과가<br />
다른 선수에게 반영이 되지 않는 경우가 있을 수 있기 때문이다.)</li>
  <li>각 선수의 이긴 선수 win 맵과 진 선수 defeat 맵의 크기를 합하여 그 값이 n-1이면 확실히 등수를 알 수 있으므로 answer를 증가시킨다.</li>
  <li>반복문이 끝나 answer 값이 구해지면 answer를 반환하다.<br />
<br /><br /></li>
</ol>

<h2 id="3-해결코드">3. 해결코드</h2>
<h3 id="c">[C++]</h3>
<div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include &lt;vector&gt;
#include &lt;map&gt;
#include &lt;set&gt;
</span>
<span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>

<span class="kt">int</span> <span class="nf">solution</span><span class="p">(</span><span class="kt">int</span> <span class="n">n</span><span class="p">,</span> <span class="n">vector</span><span class="o">&lt;</span><span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;&gt;</span> <span class="n">results</span><span class="p">)</span> <span class="p">{</span>
    <span class="n">map</span><span class="o">&lt;</span><span class="kt">int</span><span class="p">,</span> <span class="n">set</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;&gt;</span> <span class="n">win</span><span class="p">;</span>
    <span class="n">map</span><span class="o">&lt;</span><span class="kt">int</span><span class="p">,</span> <span class="n">set</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;&gt;</span> <span class="n">defeat</span><span class="p">;</span>
    <span class="kt">int</span> <span class="n">answer</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
    
    <span class="k">for</span><span class="p">(</span><span class="k">auto</span> <span class="n">result</span> <span class="o">:</span> <span class="n">results</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">win</span><span class="p">[</span><span class="n">result</span><span class="p">[</span><span class="mi">0</span><span class="p">]].</span><span class="n">insert</span><span class="p">(</span><span class="n">result</span><span class="p">[</span><span class="mi">1</span><span class="p">]);</span>
        <span class="n">defeat</span><span class="p">[</span><span class="n">result</span><span class="p">[</span><span class="mi">1</span><span class="p">]].</span><span class="n">insert</span><span class="p">(</span><span class="n">result</span><span class="p">[</span><span class="mi">0</span><span class="p">]);</span>
    <span class="p">}</span>
    
    <span class="kt">int</span> <span class="n">count</span> <span class="o">=</span> <span class="n">n</span><span class="p">;</span>
    <span class="k">while</span><span class="p">(</span><span class="o">--</span><span class="n">count</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;=</span> <span class="n">n</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
            <span class="k">for</span><span class="p">(</span><span class="k">auto</span> <span class="n">loser</span> <span class="o">:</span> <span class="n">win</span><span class="p">[</span><span class="n">i</span><span class="p">])</span>
                <span class="n">win</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">insert</span><span class="p">(</span><span class="n">win</span><span class="p">[</span><span class="n">loser</span><span class="p">].</span><span class="n">begin</span><span class="p">(),</span> <span class="n">win</span><span class="p">[</span><span class="n">loser</span><span class="p">].</span><span class="n">end</span><span class="p">());</span>

            <span class="k">for</span><span class="p">(</span><span class="k">auto</span> <span class="n">winner</span> <span class="o">:</span> <span class="n">defeat</span><span class="p">[</span><span class="n">i</span><span class="p">])</span>
                <span class="n">defeat</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">insert</span><span class="p">(</span><span class="n">defeat</span><span class="p">[</span><span class="n">winner</span><span class="p">].</span><span class="n">begin</span><span class="p">(),</span> <span class="n">defeat</span><span class="p">[</span><span class="n">winner</span><span class="p">].</span><span class="n">end</span><span class="p">());</span>
        <span class="p">}</span>
    <span class="p">}</span>
    
    <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;=</span> <span class="n">n</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
        <span class="k">if</span><span class="p">(</span><span class="n">win</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">size</span><span class="p">()</span> <span class="o">+</span> <span class="n">defeat</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">size</span><span class="p">()</span> <span class="o">==</span> <span class="n">n</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span> <span class="n">answer</span><span class="o">++</span><span class="p">;</span>
        
    <span class="k">return</span> <span class="n">answer</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>
<p><br /><br /><br /></p>

<h2 id="4-해결능력up-깊이-생각해보기">4. 해결능력UP, 깊이 생각해보기</h2>
<ul>
  <li>set에 다른 set을 삽입하는 방법
<br /><br /><br /></li>
</ul>

<h2 id="5-참고해서-문제해결-٩-ᐛ-و">5. 참고해서 문제해결 ٩( ᐛ )و</h2>
<ul>
  <li>std:set:insert <a href="http://cplusplus.com/reference/set/set/insert/">http://cplusplus.com/reference/set/set/insert/</a><br />
set에 다른 set을 삽입할 때는 <code class="highlighter-rouge">set.insert()</code> 함수를 사용,<br />
<code class="highlighter-rouge">set1.insert(set2.begin(), set2.end())</code>의 형태로 set2를 set1에 삽입 가능
<br /><br /><br /></li>
</ul>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>출처: 프로그래머스 코딩 테스트 연습, https://programmers.co.kr/learn/challenges
</code></pre></div></div>
:ET