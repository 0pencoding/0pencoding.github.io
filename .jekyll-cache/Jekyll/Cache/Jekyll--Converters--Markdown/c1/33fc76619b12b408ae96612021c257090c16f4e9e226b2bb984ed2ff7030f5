I"d<p>문제… 완전… 못 풀었어…ㅠㅠ 이번 문제는 정말 지저분하게 풀고 알고리즘이 깔끔하지 못하다는 생각이 들었다ㅠㅠ (세상에 3중 for문 이라니..) C++에서 문자열 split 관련 함수를 정식적으로 지원해주지 않는다는 것도 코드가 지저분해진데에 한 몫 하기 했지만, 그래도 제일 큰 문제는 내 알고리즘이 잘못된거겠지…?ㅠㅠ 문제를 봤을때 완전탐색 문제라는 생각은 들었는데 어떻게 풀어야할지는 잘 감이 오지 않았다.. 지저분한 코드로 해결은 했으나, 아직 다른 사람의 풀이도 보지 않은 상태이기 때문에 좀 더 깔끔한 알고리즘을 더 생각해보고 다시 풀어볼 생각이다..!<br />
<br />
<br /></p>

<h2 id="1-문제">1. 문제</h2>

<p>IT 벤처 회사를 운영하고 있는 라이언은 매년 사내 해커톤 대회를 개최하여 우승자에게 상금을 지급하고 있습니다.<br />
이번 대회에서는 우승자에게 지급되는 상금을 이전 대회와는 다르게 다음과 같은 방식으로 결정하려고 합니다.<br />
해커톤 대회에 참가하는 모든 참가자들에게는 숫자들과 3가지의 연산문자(+, -, *) 만으로 이루어진 연산 수식이 전달되며, 참가자의 미션은 전달받은 수식에 포함된 연산자의 우선순위를 자유롭게 재정의하여 만들 수 있는 가장 큰 숫자를 제출하는 것입니다.</p>

<p>단, 연산자의 우선순위를 새로 정의할 때, 같은 순위의 연산자는 없어야 합니다.<br />
즉, + &gt; - &gt; _ 또는 - &gt; _ &gt; + 등과 같이 연산자 우선순위를 정의할 수 있으나 +,_ &gt; - 또는 _ &gt; +,-처럼 2개 이상의 연산자가 동일한 순위를 가지도록 연산자 우선순위를 정의할 수는 없습니다. 수식에 포함된 연산자가 2개라면 정의할 수 있는 연산자 우선순위 조합은 2! = 2가지이며, 연산자가 3개라면 3! = 6가지 조합이 가능합니다. 만약 계산된 결과가 음수라면 해당 숫자의 절댓값으로 변환하여 제출하며 제출한 숫자가 가장 큰 참가자를 우승자로 선정하며, 우승자가 제출한 숫자를 우승상금으로 지급하게 됩니다.</p>

<p>예를 들어, 참가자 중 네오가 아래와 같은 수식을 전달받았다고 가정합니다.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><!-- <td class="rouge-gutter gl"><pre class="lineno">1
</pre></td> --><td class="rouge-code"><pre>"100-200*300-500+20"
</pre></td></tr></tbody></table></code></pre></div></div>

<p><br />
일반적으로 수학 및 전산학에서 약속된 연산자 우선순위에 따르면 더하기와 빼기는 서로 동등하며 곱하기는 더하기, 빼기에 비해 우선순위가 높아 * &gt; +,- 로 우선순위가 정의되어 있습니다. 대회 규칙에 따라 + &gt; - &gt; * 또는 - &gt; * &gt; + 등과 같이 연산자 우선순위를 정의할 수 있으나 +,* &gt; - 또는 * &gt; +,- 처럼 2개 이상의 연산자가 동일한 순위를 가지도록 연산자 우선순위를 정의할 수는 없습니다. 수식에 연산자가 3개 주어졌으므로 가능한 연산자 우선순위 조합은 3! = 6가지이며, 그 중 + &gt; - &gt; * 로 연산자 우선순위를 정한다면 결괏값은 22,000원이 됩니다. 반면에 * &gt; + &gt; - 로 연산자 우선순위를 정한다면 수식의 결괏값은 -60,420 이지만, 규칙에 따라 우승 시 상금은 절댓값인 60,420원이 됩니다.</p>

<p>참가자에게 주어진 연산 수식이 담긴 문자열 expression이 매개변수로 주어질 때,<br />
우승 시 받을 수 있는 가장 큰 상금 금액을 return 하도록 solution 함수를 완성해주세요.</p>

<h3 id="제한조건">제한조건</h3>

<ul>
  <li>expression은 길이가 3 이상 100 이하인 문자열입니다.</li>
  <li>expression은 공백문자, 괄호문자 없이 오로지 숫자와 3가지의 연산자(+, -, *) 만으로 이루어진 올바른 중위표기법(연산의 두 대상 사이에 연산기호를 사용하는 방식)으로 표현된 연산식입니다. 잘못된 연산식은 입력으로 주어지지 않습니다.
    <ul>
      <li>즉, “402+-561*“처럼 잘못된 수식은 올바른 중위표기법이 아니므로 주어지지 않습니다.</li>
    </ul>
  </li>
  <li>expression의 피연산자(operand)는 0 이상 999 이하의 숫자입니다.
    <ul>
      <li>즉, “100-2145*458+12”처럼 999를 초과하는 피연산자가 포함된 수식은 입력으로 주어지지 않습니다.</li>
      <li>“-56+100”처럼 피연산자가 음수인 수식도 입력으로 주어지지 않습니다.</li>
    </ul>
  </li>
  <li>expression은 적어도 1개 이상의 연산자를 포함하고 있습니다.</li>
  <li>연산자 우선순위를 어떻게 적용하더라도, expression의 중간 계산값과 최종 결괏값은 절댓값이 263 - 1 이하가 되도록 입력이 주어집니다.</li>
  <li>같은 연산자끼리는 앞에 있는 것의 우선순위가 더 높습니다.
<br /><br /><br /></li>
</ul>

<h2 id="2-알고리즘-생각해보자">2. 알고리즘! 생각해보자</h2>

<h4 id="해결은-했으나-알고리즘이-깔끔하지-못한-풀이-통과-o">해결은 했으나, 알고리즘이 깔끔하지 못한 풀이 (통과 O)</h4>

<ol>
  <li>strtok_s 함수는 C/C++ 언어의 본래 strtok_s()와 동일하며, permutation 함수는 아래 참고링크를 달아두었으니 설명 생략한다.</li>
  <li>처음에 매개변수로 주어지는 expression 문자열을 직접 구현한 strtok_s 함수를 사용하여 “*, +, -“ 기준으로 split하고<br />
숫자는 numbers 벡터에, 연산기호는 operands 벡터에 담는다.</li>
  <li>operands_kind 벡터를 operands 벡터를 복사하여 초기화하고, 동일한 연산기호를 지워 사용되는 연산기호의 종류만을 담도록 한다.</li>
  <li>operands_kind 벡터를 매개변수로 넘겨주고 해당 벡터의 가능한 순열을 구하여 (이것이 모든 연산자의 가능한 우선순위가 된다)<br />
operand_priority 2차원 벡터에 담는다.</li>
  <li>operand_priority 벡터를 반복하며 각 원소의 우선순위에 따라 수식을 계산한다.</li>
  <li>수식을 계산한 후, 결과 값의 절대값이 answer보다 크면 answer를 해당 값으로 바꿔준다.</li>
  <li>operand_priority 벡터의 반복이 끝나면 answer를 반환한다.<br />
<br /><br /></li>
</ol>

<h2 id="3-해결코드">3. 해결코드</h2>

<h3 id="c">[C++]</h3>

<h4 id="해결은-했으나-알고리즘이-깔끔하지-못한-풀이-통과-o-1">해결은 했으나, 알고리즘이 깔끔하지 못한 풀이 (통과 O)</h4>

<div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><!-- <td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
70
71
72
73
74
75
76
77
78
79
80
81
82
83
84
85
86
87
88
89
90
91
92
93
94
</pre></td> --><td class="rouge-code"><pre><span class="cp">#include &lt;string&gt;
#include &lt;vector&gt;
#include &lt;sstream&gt;
</span>
<span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>

<span class="kt">void</span> <span class="nf">strtok_s</span><span class="p">(</span><span class="n">string</span> <span class="n">str</span><span class="p">,</span> <span class="n">string</span> <span class="n">delimeter</span><span class="p">,</span> <span class="n">vector</span><span class="o">&lt;</span><span class="kt">long</span> <span class="kt">long</span><span class="o">&gt;&amp;</span> <span class="n">numbers</span><span class="p">,</span> <span class="n">vector</span><span class="o">&lt;</span><span class="kt">char</span><span class="o">&gt;&amp;</span> <span class="n">operands</span><span class="p">)</span> <span class="p">{</span>
    <span class="kt">long</span> <span class="kt">long</span> <span class="n">number</span><span class="p">;</span>
    <span class="n">string</span> <span class="n">num</span> <span class="o">=</span> <span class="s">""</span><span class="p">;</span>
    <span class="k">for</span><span class="p">(</span><span class="kt">char</span> <span class="n">c</span> <span class="o">:</span> <span class="n">str</span><span class="p">)</span> <span class="p">{</span>
        <span class="kt">bool</span> <span class="n">is_delimit</span> <span class="o">=</span> <span class="nb">false</span><span class="p">;</span>
        <span class="k">for</span><span class="p">(</span><span class="kt">char</span> <span class="n">d</span> <span class="o">:</span> <span class="n">delimeter</span><span class="p">)</span> <span class="p">{</span>
            <span class="k">if</span><span class="p">(</span><span class="n">c</span> <span class="o">==</span> <span class="n">d</span><span class="p">)</span> <span class="p">{</span>
                <span class="n">operands</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="n">d</span><span class="p">);</span>
                <span class="n">istringstream</span> <span class="p">(</span><span class="n">num</span><span class="p">)</span> <span class="o">&gt;&gt;</span> <span class="n">number</span><span class="p">;</span>
                <span class="n">numbers</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="n">number</span><span class="p">);</span>
                <span class="n">num</span> <span class="o">=</span> <span class="s">""</span><span class="p">;</span>
                <span class="n">is_delimit</span> <span class="o">=</span> <span class="nb">true</span><span class="p">;</span>
                <span class="k">break</span><span class="p">;</span>
            <span class="p">}</span>
        <span class="p">}</span>
        <span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="n">is_delimit</span><span class="p">)</span> <span class="n">num</span> <span class="o">+=</span> <span class="n">c</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="n">istringstream</span> <span class="p">(</span><span class="n">num</span><span class="p">)</span> <span class="o">&gt;&gt;</span> <span class="n">number</span><span class="p">;</span>
    <span class="n">numbers</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="n">number</span><span class="p">);</span>
<span class="p">}</span>

<span class="kt">void</span> <span class="nf">permutation</span><span class="p">(</span><span class="n">vector</span><span class="o">&lt;</span><span class="n">vector</span><span class="o">&lt;</span><span class="kt">char</span><span class="o">&gt;&gt;&amp;</span> <span class="n">operand_priority</span><span class="p">,</span> <span class="n">vector</span><span class="o">&lt;</span><span class="kt">char</span><span class="o">&gt;&amp;</span> <span class="n">operands</span><span class="p">,</span> <span class="kt">int</span> <span class="n">start</span><span class="p">,</span> <span class="kt">int</span> <span class="n">end</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">start</span> <span class="o">==</span> <span class="n">end</span><span class="p">)</span> <span class="n">operand_priority</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="n">operands</span><span class="p">);</span>
    <span class="k">else</span> <span class="p">{</span>
        <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">start</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;=</span> <span class="n">end</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
            <span class="n">swap</span><span class="p">(</span><span class="n">operands</span><span class="p">[</span><span class="n">start</span><span class="p">],</span> <span class="n">operands</span><span class="p">[</span><span class="n">i</span><span class="p">]);</span>
            <span class="n">permutation</span><span class="p">(</span><span class="n">operand_priority</span><span class="p">,</span> <span class="n">operands</span><span class="p">,</span> <span class="n">start</span> <span class="o">+</span> <span class="mi">1</span><span class="p">,</span> <span class="n">end</span><span class="p">);</span>
            <span class="n">swap</span><span class="p">(</span><span class="n">operands</span><span class="p">[</span><span class="n">start</span><span class="p">],</span> <span class="n">operands</span><span class="p">[</span><span class="n">i</span><span class="p">]);</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="kt">long</span> <span class="kt">long</span> <span class="nf">solution</span><span class="p">(</span><span class="n">string</span> <span class="n">expression</span><span class="p">)</span> <span class="p">{</span>
    <span class="n">vector</span><span class="o">&lt;</span><span class="n">vector</span><span class="o">&lt;</span><span class="kt">char</span><span class="o">&gt;&gt;</span> <span class="n">operand_priority</span><span class="p">;</span>
    <span class="n">vector</span><span class="o">&lt;</span><span class="kt">char</span><span class="o">&gt;</span> <span class="n">operands</span><span class="p">;</span>
    <span class="n">vector</span><span class="o">&lt;</span><span class="kt">long</span> <span class="kt">long</span><span class="o">&gt;</span> <span class="n">numbers</span><span class="p">;</span>
    <span class="kt">long</span> <span class="kt">long</span> <span class="n">answer</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>

    <span class="n">strtok_s</span><span class="p">(</span><span class="n">expression</span><span class="p">,</span> <span class="s">"*+-"</span><span class="p">,</span> <span class="n">numbers</span><span class="p">,</span> <span class="n">operands</span><span class="p">);</span>
    <span class="n">vector</span><span class="o">&lt;</span><span class="kt">char</span><span class="o">&gt;</span> <span class="n">operands_kind</span><span class="p">(</span><span class="n">operands</span><span class="p">);</span>

    <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">operands_kind</span><span class="p">.</span><span class="n">size</span><span class="p">()</span> <span class="o">-</span> <span class="mi">1</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">j</span> <span class="o">=</span> <span class="n">i</span> <span class="o">+</span> <span class="mi">1</span><span class="p">;</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="n">operands_kind</span><span class="p">.</span><span class="n">size</span><span class="p">();</span> <span class="n">j</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
            <span class="k">if</span> <span class="p">(</span><span class="n">operands_kind</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">==</span> <span class="n">operands_kind</span><span class="p">[</span><span class="n">j</span><span class="p">])</span> <span class="p">{</span>
                <span class="n">operands_kind</span><span class="p">.</span><span class="n">erase</span><span class="p">(</span><span class="n">operands_kind</span><span class="p">.</span><span class="n">begin</span><span class="p">()</span> <span class="o">+</span> <span class="n">j</span><span class="p">);</span>
                <span class="n">j</span><span class="o">--</span><span class="p">;</span>
            <span class="p">}</span>
        <span class="p">}</span>
    <span class="p">}</span>

    <span class="n">permutation</span><span class="p">(</span><span class="n">operand_priority</span><span class="p">,</span> <span class="n">operands_kind</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">2</span><span class="p">);</span>

    <span class="k">for</span><span class="p">(</span><span class="k">auto</span> <span class="n">priority</span> <span class="o">:</span> <span class="n">operand_priority</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">vector</span><span class="o">&lt;</span><span class="kt">long</span> <span class="kt">long</span><span class="o">&gt;</span> <span class="n">cpNumbers</span> <span class="p">(</span><span class="n">numbers</span><span class="p">);</span>
        <span class="n">vector</span><span class="o">&lt;</span><span class="kt">char</span><span class="o">&gt;</span> <span class="n">cpOperands</span> <span class="p">(</span><span class="n">operands</span><span class="p">);</span>
        <span class="k">for</span><span class="p">(</span><span class="kt">char</span> <span class="n">c</span> <span class="o">:</span> <span class="n">priority</span><span class="p">)</span> <span class="p">{</span>
            <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">cpOperands</span><span class="p">.</span><span class="n">size</span><span class="p">();</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
                <span class="k">if</span> <span class="p">(</span><span class="n">cpOperands</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">==</span> <span class="n">c</span><span class="p">)</span> <span class="p">{</span>
                    <span class="k">switch</span><span class="p">(</span><span class="n">c</span><span class="p">)</span> <span class="p">{</span>
                        <span class="k">case</span> <span class="sc">'*'</span><span class="p">:</span>
                            <span class="n">cpNumbers</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">*=</span> <span class="n">cpNumbers</span><span class="p">[</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="p">];</span>
                            <span class="n">cpOperands</span><span class="p">.</span><span class="n">erase</span><span class="p">(</span><span class="n">cpOperands</span><span class="p">.</span><span class="n">begin</span><span class="p">()</span> <span class="o">+</span> <span class="n">i</span><span class="p">);</span>
                            <span class="n">cpNumbers</span><span class="p">.</span><span class="n">erase</span><span class="p">(</span><span class="n">cpNumbers</span><span class="p">.</span><span class="n">begin</span><span class="p">()</span> <span class="o">+</span> <span class="n">i</span> <span class="o">+</span> <span class="mi">1</span><span class="p">);</span>
                            <span class="n">i</span><span class="o">--</span><span class="p">;</span>
                            <span class="k">break</span><span class="p">;</span>
                        <span class="k">case</span> <span class="sc">'+'</span><span class="p">:</span>
                            <span class="n">cpNumbers</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">+=</span> <span class="n">cpNumbers</span><span class="p">[</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="p">];</span>
                            <span class="n">cpOperands</span><span class="p">.</span><span class="n">erase</span><span class="p">(</span><span class="n">cpOperands</span><span class="p">.</span><span class="n">begin</span><span class="p">()</span> <span class="o">+</span> <span class="n">i</span><span class="p">);</span>
                            <span class="n">cpNumbers</span><span class="p">.</span><span class="n">erase</span><span class="p">(</span><span class="n">cpNumbers</span><span class="p">.</span><span class="n">begin</span><span class="p">()</span> <span class="o">+</span> <span class="n">i</span> <span class="o">+</span> <span class="mi">1</span><span class="p">);</span>
                            <span class="n">i</span><span class="o">--</span><span class="p">;</span>
                            <span class="k">break</span><span class="p">;</span>
                        <span class="k">case</span> <span class="sc">'-'</span><span class="p">:</span>
                            <span class="n">cpNumbers</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">-=</span> <span class="n">cpNumbers</span><span class="p">[</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="p">];</span>
                            <span class="n">cpOperands</span><span class="p">.</span><span class="n">erase</span><span class="p">(</span><span class="n">cpOperands</span><span class="p">.</span><span class="n">begin</span><span class="p">()</span> <span class="o">+</span> <span class="n">i</span><span class="p">);</span>
                            <span class="n">cpNumbers</span><span class="p">.</span><span class="n">erase</span><span class="p">(</span><span class="n">cpNumbers</span><span class="p">.</span><span class="n">begin</span><span class="p">()</span> <span class="o">+</span> <span class="n">i</span> <span class="o">+</span> <span class="mi">1</span><span class="p">);</span>
                            <span class="n">i</span><span class="o">--</span><span class="p">;</span>
                            <span class="k">break</span><span class="p">;</span>
                        <span class="nl">default:</span>
                            <span class="p">;</span>
                    <span class="p">}</span>
                <span class="p">}</span>
            <span class="p">}</span>
        <span class="p">}</span>
        <span class="k">if</span><span class="p">(</span><span class="n">abs</span><span class="p">(</span><span class="n">cpNumbers</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span> <span class="o">&gt;</span> <span class="n">answer</span><span class="p">)</span> <span class="n">answer</span> <span class="o">=</span> <span class="n">abs</span><span class="p">(</span><span class="n">cpNumbers</span><span class="p">[</span><span class="mi">0</span><span class="p">]);</span>
    <span class="p">}</span>

    <span class="k">return</span> <span class="n">answer</span><span class="p">;</span>
<span class="p">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p><br /><br /><br /></p>

<h2 id="4-해결능력up-깊이-생각해보기">4. 해결능력UP, 깊이 생각해보기</h2>

<ul>
  <li>순열을 구하는 방법 (DFS/BFS 적용했다고 보면되지 않을까!)</li>
  <li>문자열 split하는 함수 생성 (내가 원하는대로 자유롭게 사용할 수 있도록 구현할 정도로 실력 쌓자!)<br />
(위의 strtok_s()는 본래 C, C++의 strtok_s() 기능을 생각해서 내 나름대로 스스로 구현해 보았다)</li>
  <li>문자열 정수형으로 바꾸기
<br /><br /><br /></li>
</ul>

<h2 id="5-참고해서-문제해결-٩-ᐛ-و">5. 참고해서 문제해결 ٩( ᐛ )و</h2>

<ul>
  <li>순열 알고리즘(Permutation Algorithm) <a href="https://minusi.tistory.com/entry/%EC%88%9C%EC%97%B4-%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98-Permutation-Algorithm">https://minusi.tistory.com/entry/%EC%88%9C%EC%97%B4-%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98-Permutation-Algorithm</a><br />
재귀함수를 사용해서 순열을 구하는 함수 작성, 결과적으로 DFS의 느낌, 잘 공부해두자!</li>
  <li>[Stack overflow] convert string to int - <a href="https://stackoverflow.com/questions/7663709/how-can-i-convert-a-stdstring-to-int">https://stackoverflow.com/questions/7663709/how-can-i-convert-a-stdstring-to-int</a><br />
문자열을 정수형으로 바꿀때는 “isstream(string) » 정수형 변수” 으로 초기화와 동시에 정수형 변수에 할당 가능<br />
<br /><br /><br /></li>
</ul>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><!-- <td class="rouge-gutter gl"><pre class="lineno">1
</pre></td> --><td class="rouge-code"><pre>출처: 프로그래머스 코딩 테스트 연습, https://programmers.co.kr/learn/challenges
</pre></td></tr></tbody></table></code></pre></div></div>
:ET