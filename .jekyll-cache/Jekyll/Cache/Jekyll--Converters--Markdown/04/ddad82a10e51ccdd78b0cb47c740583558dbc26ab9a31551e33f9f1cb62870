I"u,<main class="container">
  <section class="about">
    <a href="/"><img src="/assets/img/profile//profile.png" alt="YuJin Kim" /></a>
    <h2 id="title">
      <a href="/">YuJin Kim</a>
    </h2>
    <p class="tagline">SW Engineer</p>
    <ul class="social"><a href="https://github.com/0pencoding">
          <li>
            <i class="icon-github-circled"></i>
          </li>
        </a></ul>

    <!--<nav class="navigation">
        <ul>
          
            <li>
              <a href="/about/">ABOUT</a>
            </li>
          
            <li>
              <a href="/post/">POST</a>
            </li>
          
        </ul>
      </nav>-->

    <p>&copy;
      2020</p>
  </section>
  <section class="content">
    <div class="post-container">
  <a class="post-link" href="/%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%A8%B8%EC%8A%A4%EA%B3%A0%EB%93%9D%EC%A0%90kit/stack/queue/level2/algorithm/c++/2020/03/17/%EC%8A%A4%ED%83%9D-%ED%81%90_%EB%8B%A4%EB%A6%AC%EB%A5%BC%EC%A7%80%EB%82%98%EB%8A%94%ED%8A%B8%EB%9F%AD_level2.html">
    <h2 class="post-title">프로그래머스 코딩테스트 고득점 Kit : [스택/큐] 다리를 지나는 트럭</h2>
  </a>
  <div class="post-meta">
    <ul class="post-categories"><li>프로그래머스고득점Kit</li><li>Stack/Queue</li><li>Level2</li><li>Algorithm</li><li>C++</li></ul>
    <div class="post-date"><i class="icon-calendar"></i>Mar 17, 2020</div>
  </div>
  <div class="post">
    <p>난이도 ★ ★ ☆<br />
오랜만에 프로그래머스 고득점 Kit 문제를 풀어 올린다. 그동안 자바 캠프에 대해서 정리하느라고 알고리즘 문제 푸는 것을 잠시 쉬었더니 금세 감을 잃었는지 이 문제를 푸는데에는 꽤 오래 걸렸다. 문제 자체를 이해하는 데에도 시간을 많이 썼던 탓도 있긴하지만, 그래도 문제를 풀어놓고보니 나름 잘 풀었다는 생각이 들어서 뿌듯했던 문제였다 :)<br />
<br /></p>

<p><br /></p>

<h2 id="1-문제">1. 문제</h2>
<p>트럭 여러 대가 강을 가로지르는 일 차선 다리를 정해진 순으로 건너려 합니다.<br />
모든 트럭이 다리를 건너려면 최소 몇 초가 걸리는지 알아내야 합니다.<br />
트럭은 1초에 1만큼 움직이며, 다리 길이는 bridge_length이고 다리는 무게 weight까지 견딥니다.<br />
※ 트럭이 다리에 완전히 오르지 않은 경우, 이 트럭의 무게는 고려하지 않습니다.</p>

<p>예를 들어, 길이가 2이고 10kg 무게를 견디는 다리가 있습니다.<br />
무게가 [7, 4, 5, 6]kg인 트럭이 순서대로 최단 시간 안에 다리를 건너려면 다음과 같이 건너야 합니다.</p>

<table>
  <thead>
    <tr>
      <th>경과 시간</th>
      <th>다리를 지난 트럭</th>
      <th>다리를 건너는 트럭</th>
      <th>대기 트럭</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>0</td>
      <td>[]</td>
      <td>[]</td>
      <td>[7,4,5,6]</td>
    </tr>
    <tr>
      <td>1~2</td>
      <td>[]</td>
      <td>[7]</td>
      <td>[4,5,6]</td>
    </tr>
    <tr>
      <td>3</td>
      <td>[7]</td>
      <td>[4]</td>
      <td>[5,6]</td>
    </tr>
    <tr>
      <td>4</td>
      <td>[7]</td>
      <td>[4,5]</td>
      <td>[6]</td>
    </tr>
    <tr>
      <td>5</td>
      <td>[7,4]</td>
      <td>[5]</td>
      <td>[6]</td>
    </tr>
    <tr>
      <td>6~7</td>
      <td>[7,4,5]</td>
      <td>[6]</td>
      <td>[]</td>
    </tr>
    <tr>
      <td>8</td>
      <td>[7,4,5,6]</td>
      <td>[]</td>
      <td>[]</td>
    </tr>
  </tbody>
</table>

<p>따라서, 모든 트럭이 다리를 지나려면 최소 8초가 걸립니다.</p>

<p>solution 함수의 매개변수로 다리 길이 bridge_length, 다리가 견딜 수 있는 무게 weight, 트럭별 무게 truck_weights가 주어집니다.<br />
이때 모든 트럭이 다리를 건너려면 최소 몇 초가 걸리는지 return 하도록 solution 함수를 완성하세요.</p>

<h3 id="제한조건">제한조건</h3>
<ul>
  <li>bridge_length는 1 이상 10,000 이하입니다.</li>
  <li>weight는 1 이상 10,000 이하입니다.</li>
  <li>truck_weights의 길이는 1 이상 10,000 이하입니다.</li>
  <li>모든 트럭의 무게는 1 이상 weight 이하입니다.
<br /><br /><br /></li>
</ul>

<h2 id="2-알고리즘-생각해보자">2. 알고리즘! 생각해보자</h2>
<p>1) 다리를 건너고 있는 트럭을 위치까지 함께 표현할 수 있도록 list를 생성한다.<br />
2) 트럭의 위치를 표현하기 위해 list를 bridge_length 만큼 0으로 초기화한다.<br />
3) 현재 다리 위에 있는 트럭의 총 무게를 알기위해 total_weight 변수를 생성한다.<br />
4) 1초가 지나고 list안의 원소를 한칸씩 앞으로 해주기위해 answer를 더하고 list에서 원소를 pop 한다.<br />
ㅤ (다리를 다 건넌 트럭의 무게를 total_weight에서 빼줘야하기 때문에 pop할 원소만큼 빼주는 것도 해야한다.)<br />
5) 다리를 건너야할 트럭이 남아있고, 트럭이 다리위로 올라가도 무게를 초과하지 않으면 다리 위로 올려준다.<br />
ㅤ (list에 트럭 무게를 추가해주고, total_weight에 해당 트럭 무게만큼 더하고, truck_weights에서는 해당 원소를 지운다.)<br />
6) 트럭이 다리위로 올라가면 무게가 초과되면, list에 아무것도 가지 못했다는 것을 나타내기 위해 0을 push한다.<br />
7) list가 비워질 때까지 4번 부터의 과정을 반복한다.<br />
<br /><br /></p>

<h2 id="3-해결코드">3. 해결코드</h2>
<h3 id="c">[C++]</h3>
<div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include &lt;vector&gt;
#include &lt;list&gt;
</span>
<span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>

<span class="kt">int</span> <span class="nf">solution</span><span class="p">(</span><span class="kt">int</span> <span class="n">bridge_length</span><span class="p">,</span> <span class="kt">int</span> <span class="n">weight</span><span class="p">,</span> <span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">truck_weights</span><span class="p">)</span> <span class="p">{</span>
    <span class="n">list</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">lst</span> <span class="p">(</span><span class="n">bridge_length</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
    <span class="kt">int</span> <span class="n">total_weight</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
    <span class="kt">int</span> <span class="n">answer</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
    
    <span class="k">while</span><span class="p">(</span><span class="n">lst</span><span class="p">.</span><span class="n">size</span><span class="p">())</span> <span class="p">{</span>
        <span class="n">total_weight</span> <span class="o">-=</span> <span class="n">lst</span><span class="p">.</span><span class="n">front</span><span class="p">();</span>
        <span class="n">lst</span><span class="p">.</span><span class="n">pop_front</span><span class="p">();</span>
        <span class="n">answer</span><span class="o">++</span><span class="p">;</span>
        
        <span class="k">if</span> <span class="p">(</span><span class="n">truck_weights</span><span class="p">.</span><span class="n">size</span><span class="p">())</span> <span class="p">{</span>
            <span class="k">if</span> <span class="p">(</span><span class="n">truck_weights</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">+</span> <span class="n">total_weight</span> <span class="o">&gt;</span> <span class="n">weight</span><span class="p">)</span> <span class="p">{</span>
                <span class="n">lst</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span>
            <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
                <span class="n">lst</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="n">truck_weights</span><span class="p">[</span><span class="mi">0</span><span class="p">]);</span>
                <span class="n">total_weight</span> <span class="o">+=</span> <span class="n">truck_weights</span><span class="p">[</span><span class="mi">0</span><span class="p">];</span>
                <span class="n">truck_weights</span><span class="p">.</span><span class="n">erase</span><span class="p">(</span><span class="n">truck_weights</span><span class="p">.</span><span class="n">begin</span><span class="p">());</span>
            <span class="p">}</span>
        <span class="p">}</span>
    <span class="p">}</span>
    
    <span class="k">return</span> <span class="n">answer</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>
<p><br /><br /><br /></p>

<h2 id="4-해결능력up-깊이-생각해보기">4. 해결능력UP, 깊이 생각해보기</h2>
<ul>
  <li>queue가 처음에 0으로 원하는 갯수만큼 초기화가 안돼서 다른 자료구조를 찾아보다가 list 발견!</li>
  <li>list 라는 자료구조가 있다는 것도 처음 알았다…</li>
  <li>answer만큼 while loop가 돌아야하는게 조금 효율성이 안좋다고 생각할 수 있는데… 그럭저럭 괜찮은듯(?!)
<br /><br /><br /></li>
</ul>

<h2 id="5-참고해서-문제해결-٩-ᐛ-و">5. 참고해서 문제해결 ٩( ᐛ )و</h2>
<ul>
  <li>[C++ 공식문서] std:list <a href="http://www.cplusplus.com/reference/list/list/">http://www.cplusplus.com/reference/list/list/</a>
<br /><br /><br /></li>
</ul>

  </div><div id="disqus_thread" style="margin-top:25px"></div>
  <script>
    var disqus_config = function () {
      this.page.url = 'http://localhost:4000/%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%A8%B8%EC%8A%A4%EA%B3%A0%EB%93%9D%EC%A0%90kit/stack/queue/level2/algorithm/c++/2020/03/17/%EC%8A%A4%ED%83%9D-%ED%81%90_%EB%8B%A4%EB%A6%AC%EB%A5%BC%EC%A7%80%EB%82%98%EB%8A%94%ED%8A%B8%EB%9F%AD_level2.html';
      this.page.identifier = 'http://localhost:4000/%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%A8%B8%EC%8A%A4%EA%B3%A0%EB%93%9D%EC%A0%90kit/stack/queue/level2/algorithm/c++/2020/03/17/%EC%8A%A4%ED%83%9D-%ED%81%90_%EB%8B%A4%EB%A6%AC%EB%A5%BC%EC%A7%80%EB%82%98%EB%8A%94%ED%8A%B8%EB%9F%AD_level2.html';
    };
    (function () {
      var d = document, s = d.createElement('script');
      s.src = 'https://0pencoding.disqus.com/embed.js';
      s.setAttribute('data-timestamp', +new Date());
      (d.head || d.body).appendChild(s);
    })();
  </script>
  <noscript>Please enable JavaScript to view the <a href="https://disqus.com/?ref_noscript" rel="nofollow">comments
      powered by Disqus.</a></noscript></div>

  </section>
</main>
<script async="" src="https://www.googletagmanager.com/gtag/js?id=UA-150778693-1"></script>

<script>
window.dataLayer = window.dataLayer || [];
function gtag() { dataLayer.push(arguments); }
gtag('js', new Date());

gtag('config', 'UA-150778693-1');
</script>

:ET