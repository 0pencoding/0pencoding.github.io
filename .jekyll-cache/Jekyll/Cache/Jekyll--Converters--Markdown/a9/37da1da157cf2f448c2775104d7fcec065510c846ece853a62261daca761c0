I"94<main class="container">
  <section class="about">
    <a href="/"><img src="/assets/img/profile//profile.png" alt="YuJin Kim" /></a>
    <h2 id="title">
      <a href="/">YuJin Kim</a>
    </h2>
    <p class="tagline">SW Engineer</p>
    <ul class="social"><a href="https://github.com/0pencoding">
          <li>
            <i class="icon-github-circled"></i>
          </li>
        </a></ul>

    <!--<nav class="navigation">
        <ul>
          
            <li>
              <a href="/about/">ABOUT</a>
            </li>
          
            <li>
              <a href="/tags/">TAGS</a>
            </li>
          
        </ul>
      </nav>-->

    <p>&copy;
      2020</p>
  </section>
  <section class="content">
    <div class="post-container">
  <a class="post-link" href="/%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%A8%B8%EC%8A%A4%EA%B3%A0%EB%93%9D%EC%A0%90kit/2020/07/16/%EA%B9%8A%EC%9D%B4-%EB%84%88%EB%B9%84%EC%9A%B0%EC%84%A0%ED%83%90%EC%83%89_%EB%8B%A8%EC%96%B4%EB%B3%80%ED%99%98_level3.html">
    <h2 class="post-title">프로그래머스 코딩테스트 고득점 Kit : [깊이/너비 우선 탐색] 단어 변환</h2>
  </a>
  <div class="post-meta">
    <ul class="post-tags">
          <li>프로그래머스 고득점 Kit</li>
        
          <li>DFS / BFS</li>
        
          <li>Level 3</li>
        
          <li>Algorithm</li>
        
          <li>C++</li>
        </ul>
    <div class="post-date"><i class="icon-calendar"></i>Jul 16, 2020</div>
  </div>

  <div class="post">
    <p>난이도 ★ ★ ★ ☆ ☆<br />
어제 저녁에 문제를 읽고 자기 전에 어떻게 풀어야할지 생각하면서 알고리즘을 대충 세우고 오늘 일어나서 풀어보았는데 생각했던 알고리즘이 맞아서 빨리 풀 수 있었다. 다만, 문제에서 기본적으로 제공해주는 기본 테스트 케이스를 틀려서 살펴보았더니 테스트 케이스가 잘못된 것을 발견했다. 혹시나 나와 같이 뭐지? 싶었던 분은 그냥 테스트 케이스가 잘못된 것이니 무시하고 코드를 제출하여 채점해보길 바란다(*´∇｀)ﾉ<br />
<br /></p>

<p><br /></p>

<h2 id="1-문제">1. 문제</h2>
<p>두 개의 단어 begin, target과 단어의 집합 words가 있습니다.<br />
아래와 같은 규칙을 이용하여 begin에서 target으로 변환하는 가장 짧은 변환 과정을 찾으려고 합니다.</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>1. 한 번에 한 개의 알파벳만 바꿀 수 있습니다.
2. words에 있는 단어로만 변환할 수 있습니다.
</code></pre></div></div>
<p><br /></p>

<p>예를 들어 begin이 hit, target가 cog, words가 [hot,dot,dog,lot,log,cog]라면<br />
hit -&gt; hot -&gt; dot -&gt; dog -&gt; cog와 같이 4단계를 거쳐 변환할 수 있습니다.</p>

<p>두 개의 단어 begin, target과 단어의 집합 words가 매개변수로 주어질 때,<br />
최소 몇 단계의 과정을 거쳐 begin을 target으로 변환할 수 있는지 return 하도록 solution 함수를 작성해주세요.</p>

<h3 id="제한조건">제한조건</h3>
<ul>
  <li>각 단어는 알파벳 소문자로만 이루어져 있습니다.</li>
  <li>각 단어의 길이는 3 이상 10 이하이며 모든 단어의 길이는 같습니다.</li>
  <li>words에는 3개 이상 50개 이하의 단어가 있으며 중복되는 단어는 없습니다.</li>
  <li>begin과 target은 같지 않습니다.</li>
  <li>변환할 수 없는 경우에는 0를 return 합니다.
<br /><br /><br /></li>
</ul>

<h2 id="2-알고리즘-생각해보자">2. 알고리즘! 생각해보자</h2>
<ol>
  <li>단어를 다른 단어로 변환할 수 있는지 확인하는 canChange() 함수를 생성한다.<br />
(canChange() 함수는 두 단어를 비교해 서로 다른 알파벳이 한 개인지 확인하여 반환하는 함수)</li>
  <li>단어를 변환하며 최소 단계의 변환 횟수를 찾는 함수 dfs()를 생성한다.</li>
  <li>dfs() 함수의 동작 방식은 다음과 같다.</li>
  <li>먼저 현재 단어를 taget 단어로 바꿀 수 있는지 확인해 바꿀 수 있다면 1을 반환한다.</li>
  <li>target 단어로 바꿀 수 없으면, 현재 단어에서 변환할 수 있는 단어를 words 벡터 내에서 찾는다.</li>
  <li>벡터 내에 변환할 수 있는 단어가 있으면 또 다시 그 단어에서 변환 할 수 있는 다른 단어를 찾기 위해<br />
벡터에서 해당 단어를 지우고 해당 단어를 begin 인자로, 해당 단어를 지운 벡터를 words 인자로하는 dfs() 함수에 재귀적으로 적용한다.</li>
  <li>반환되는 값이 현재 최소 변환 횟수 answer보다 작으면 해당 값으로 재설정해준다.</li>
  <li>반복이 끝나고, words 벡터에 변환할 수 있는 단어가 없으면 (answer가 그대로 50이면) 0을 반환한다.</li>
  <li>그렇지 않으면 최소 변환 횟수 answer를 반환한다.<br />
<br /><br /></li>
</ol>

<h2 id="3-해결코드">3. 해결코드</h2>
<h3 id="c">[C++]</h3>
<div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include &lt;string&gt;
#include &lt;vector&gt;
</span>
<span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>

<span class="kt">bool</span> <span class="nf">canChange</span><span class="p">(</span><span class="n">string</span> <span class="n">prev</span><span class="p">,</span> <span class="n">string</span> <span class="n">next</span><span class="p">)</span> <span class="p">{</span>
    <span class="kt">bool</span> <span class="n">diff</span> <span class="o">=</span> <span class="nb">false</span><span class="p">;</span>
    
    <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">prev</span><span class="p">.</span><span class="n">length</span><span class="p">();</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">if</span> <span class="p">(</span><span class="n">prev</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">!=</span> <span class="n">next</span><span class="p">[</span><span class="n">i</span><span class="p">])</span> <span class="p">{</span>
            <span class="k">if</span> <span class="p">(</span><span class="n">diff</span><span class="p">)</span> <span class="k">return</span> <span class="nb">false</span><span class="p">;</span>
            <span class="k">else</span> <span class="n">diff</span> <span class="o">=</span> <span class="nb">true</span><span class="p">;</span>
        <span class="p">}</span>
    <span class="p">}</span>
    
    <span class="k">return</span> <span class="nb">true</span><span class="p">;</span>
<span class="p">}</span>

<span class="kt">int</span> <span class="nf">dfs</span><span class="p">(</span><span class="n">string</span> <span class="n">begin</span><span class="p">,</span> <span class="n">string</span> <span class="n">target</span><span class="p">,</span> <span class="n">vector</span><span class="o">&lt;</span><span class="n">string</span><span class="o">&gt;</span> <span class="n">words</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">canChange</span><span class="p">(</span><span class="n">begin</span><span class="p">,</span> <span class="n">target</span><span class="p">))</span> <span class="k">return</span> <span class="mi">1</span><span class="p">;</span>
    
    <span class="kt">int</span> <span class="n">cAnswer</span><span class="p">,</span> <span class="n">answer</span> <span class="o">=</span> <span class="mi">50</span><span class="p">;</span>
    <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">words</span><span class="p">.</span><span class="n">size</span><span class="p">();</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">if</span> <span class="p">(</span><span class="n">canChange</span><span class="p">(</span><span class="n">begin</span><span class="p">,</span> <span class="n">words</span><span class="p">[</span><span class="n">i</span><span class="p">]))</span> <span class="p">{</span>
            <span class="n">vector</span><span class="o">&lt;</span><span class="n">string</span><span class="o">&gt;</span> <span class="n">words_cp</span> <span class="o">=</span> <span class="n">words</span><span class="p">;</span>
            <span class="n">words_cp</span><span class="p">.</span><span class="n">erase</span><span class="p">(</span><span class="n">words_cp</span><span class="p">.</span><span class="n">begin</span><span class="p">()</span> <span class="o">+</span> <span class="n">i</span><span class="p">);</span>
            <span class="n">cAnswer</span> <span class="o">=</span> <span class="n">dfs</span><span class="p">(</span><span class="n">words</span><span class="p">[</span><span class="n">i</span><span class="p">],</span> <span class="n">target</span><span class="p">,</span> <span class="n">words_cp</span><span class="p">);</span>
            <span class="k">if</span> <span class="p">(</span><span class="n">cAnswer</span> <span class="o">!=</span> <span class="mi">0</span> <span class="o">&amp;&amp;</span> <span class="n">answer</span> <span class="o">&gt;</span> <span class="n">cAnswer</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span> <span class="n">answer</span> <span class="o">=</span> <span class="n">cAnswer</span><span class="o">+</span><span class="mi">1</span><span class="p">;</span>
        <span class="p">}</span>
    <span class="p">}</span>

    <span class="k">if</span> <span class="p">(</span><span class="n">answer</span> <span class="o">==</span> <span class="mi">50</span><span class="p">)</span> <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
    <span class="k">return</span> <span class="n">answer</span><span class="p">;</span>
<span class="p">}</span>

<span class="kt">int</span> <span class="nf">solution</span><span class="p">(</span><span class="n">string</span> <span class="n">begin</span><span class="p">,</span> <span class="n">string</span> <span class="n">target</span><span class="p">,</span> <span class="n">vector</span><span class="o">&lt;</span><span class="n">string</span><span class="o">&gt;</span> <span class="n">words</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">return</span> <span class="n">dfs</span><span class="p">(</span><span class="n">begin</span><span class="p">,</span> <span class="n">target</span><span class="p">,</span> <span class="n">words</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></div></div>
<p><br /><br /><br /></p>

<h2 id="4-해결능력up-깊이-생각해보기">4. 해결능력UP, 깊이 생각해보기</h2>
<ul>
  <li>기본으로 제공해주는 테스트 케이스가 잘못되었다</li>
  <li>빨리 해결해서 기분이 좋다</li>
  <li>재귀 함수는 생각하기 힘들어…</li>
  <li>열심히 공부해야지 (<em>´◒`</em>)
<br /><br /><br /></li>
</ul>

<h2 id="5-참고해서-문제해결-٩-ᐛ-و">5. 참고해서 문제해결 ٩( ᐛ )و</h2>
<ul>
  <li>없다 <em>(</em>´∀｀*)☆
<br /><br /><br /></li>
</ul>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>출처: 프로그래머스 코딩 테스트 연습, https://programmers.co.kr/learn/challenges
</code></pre></div></div>

  </div><div id="disqus_thread" style="margin-top:25px"></div>
  <script>
    var disqus_config = function () {
      this.page.url = 'http://localhost:4000/%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%A8%B8%EC%8A%A4%EA%B3%A0%EB%93%9D%EC%A0%90kit/2020/07/16/%EA%B9%8A%EC%9D%B4-%EB%84%88%EB%B9%84%EC%9A%B0%EC%84%A0%ED%83%90%EC%83%89_%EB%8B%A8%EC%96%B4%EB%B3%80%ED%99%98_level3.html';
      this.page.identifier = 'http://localhost:4000/%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%A8%B8%EC%8A%A4%EA%B3%A0%EB%93%9D%EC%A0%90kit/2020/07/16/%EA%B9%8A%EC%9D%B4-%EB%84%88%EB%B9%84%EC%9A%B0%EC%84%A0%ED%83%90%EC%83%89_%EB%8B%A8%EC%96%B4%EB%B3%80%ED%99%98_level3.html';
    };
    (function () {
      var d = document, s = d.createElement('script');
      s.src = 'https://0pencoding.disqus.com/embed.js';
      s.setAttribute('data-timestamp', +new Date());
      (d.head || d.body).appendChild(s);
    })();
  </script>
  <noscript>Please enable JavaScript to view the <a href="https://disqus.com/?ref_noscript" rel="nofollow">comments
      powered by Disqus.</a></noscript></div>

  </section>
</main>
<script async="" src="https://www.googletagmanager.com/gtag/js?id=UA-150778693-1"></script>

<script>
window.dataLayer = window.dataLayer || [];
function gtag() { dataLayer.push(arguments); }
gtag('js', new Date());

gtag('config', 'UA-150778693-1');
</script>

:ET