I"W<<main class="container">
  <section class="about">
    <a href="/"><img src="/assets/img/profile//profile.png" alt="YuJin Kim" /></a>
    <h2 id="title">
      <a href="/">YuJin Kim</a>
    </h2>
    <p class="tagline">SW Engineer</p>
    <ul class="social"><a href="https://github.com/0pencoding">
          <li>
            <i class="icon-github-circled"></i>
          </li>
        </a></ul>

    <!--<nav class="navigation">
        <ul>
          
            <li>
              <a href="/about/">ABOUT</a>
            </li>
          
            <li>
              <a href="/tags/">TAGS</a>
            </li>
          
        </ul>
      </nav>-->

    <p>&copy;
      2020</p>
  </section>
  <section class="content">
    <div class="post-container">
  <a class="post-link" href="/%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%A8%B8%EC%8A%A4%EA%B3%A0%EB%93%9D%EC%A0%90kit/2020/07/15/%ED%9E%99_%EB%94%94%EC%8A%A4%ED%81%AC%EC%BB%A8%ED%8A%B8%EB%A1%A4%EB%9F%AC_level3.html">
    <h2 class="post-title">프로그래머스 코딩테스트 고득점 Kit : [힙] 디스크 컨트롤러</h2>
  </a>
  <div class="post-meta">
    <ul class="post-tags">
          <li>프로그래머스 고득점 Kit</li>
        
          <li>Heap</li>
        
          <li>Level 3</li>
        
          <li>Algorithm</li>
        
          <li>C++</li>
        </ul>
    <div class="post-date"><i class="icon-calendar"></i>Jul 15, 2020</div>
  </div>

  <div class="post">
    <p>난이도 ★ ★ ★ ☆ ☆<br />
이 문제 진짜 오랫동안 풀었다… 풀 수 있을 것 같은데 계속 안풀려서 스트레스도 엄청 받고ㅠㅠ 결국 2시간 30분만에 끝내 풀어냈지만.. 풀어낸 답 마저도 썩 마음에 들지는 않았던 문제였다. 문제에서 효율성 테스트는 없었지만, 정확도 테스트 케이스 자체에서 효율성까지 함께 채점되는 듯한 느낌이었다. 처음에 세웠던 알고리즘은 시간초과헤서 풀리지 않은 테스트 케이스들이 꽤 많았기 때문에.. 여튼, 끝내 풀어냈지만 더 공부가 많이 필요한 유형인 것 같다.<br />
<br /></p>

<p><br /></p>

<h2 id="1-문제">1. 문제</h2>
<p>하드디스크는 한 번에 하나의 작업만 수행할 수 있습니다.<br />
디스크 컨트롤러를 구현하는 방법은 여러 가지가 있습니다.<br />
가장 일반적인 방법은 요청이 들어온 순서대로 처리하는 것입니다.</p>

<p>예를들어,</p>
<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>- 0ms 시점에 3ms가 소요되는 A작업 요청
- 1ms 시점에 9ms가 소요되는 B작업 요청
- 2ms 시점에 6ms가 소요되는 C작업 요청
</code></pre></div></div>

<p>와 같은 요청이 들어왔습니다. 이를 그림으로 표현하면 아래와 같습니다.<br />
<img src="https://grepp-programmers.s3.amazonaws.com/files/production/b68eb5cec6/38dc6a53-2d21-4c72-90ac-f059729c51d5.png" alt="disk_controller1" width="600" /></p>

<p>한 번에 하나의 요청만을 수행할 수 있기 때문에 각각의 작업을 요청받은 순서대로 처리하면 다음과 같이 처리 됩니다.</p>

<p><img src="https://grepp-programmers.s3.amazonaws.com/files/production/5e677b4646/90b91fde-cac4-42c1-98b8-8f8431c52dcf.png" alt="disk_controller2" width="600" /></p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>- A: 3ms 시점에 작업 완료 (요청에서 종료까지 : 3ms)
- B: 1ms부터 대기하다가, 3ms 시점에 작업을 시작해서 12ms 시점에 작업 완료(요청에서 종료까지 : 11ms)
- C: 2ms부터 대기하다가, 12ms 시점에 작업을 시작해서 18ms 시점에 작업 완료(요청에서 종료까지 : 16ms)
</code></pre></div></div>

<p>이 때 각 작업의 요청부터 종료까지 걸린 시간의 평균은 10ms(= (3 + 11 + 16) / 3)가 됩니다.<br />
<br /></p>

<p>하지만 A → C → B 순서대로 처리하면<br />
<img src="https://grepp-programmers.s3.amazonaws.com/files/production/9eb7c5a6f1/a6cff04d-86bb-4b5b-98bf-6359158940ac.png" alt="disk_controller3" width="600" /></p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>- A: 3ms 시점에 작업 완료(요청에서 종료까지 : 3ms)
- C: 2ms부터 대기하다가, 3ms 시점에 작업을 시작해서 9ms 시점에 작업 완료(요청에서 종료까지 : 7ms)
- B: 1ms부터 대기하다가, 9ms 시점에 작업을 시작해서 18ms 시점에 작업 완료(요청에서 종료까지 : 17ms)
</code></pre></div></div>

<p>이렇게 A → C → B의 순서로 처리하면 각 작업의 요청부터 종료까지 걸린 시간의 평균은 9ms(= (3 + 7 + 17) / 3)가 됩니다.<br />
<br /></p>

<p>각 작업에 대해 [작업이 요청되는 시점, 작업의 소요시간]을 담은 2차원 배열 jobs가 매개변수로 주어질 때,<br />
작업의 요청부터 종료까지 걸린 시간의 평균을 가장 줄이는 방법으로 처리하면 평균이 얼마가 되는지 return 하도록 solution 함수를 작성해주세요.<br />
(단, 소수점 이하의 수는 버립니다)</p>

<h3 id="제한조건">제한조건</h3>
<ul>
  <li>jobs의 길이는 1 이상 500 이하입니다.</li>
  <li>jobs의 각 행은 하나의 작업에 대한 [작업이 요청되는 시점, 작업의 소요시간] 입니다.</li>
  <li>각 작업에 대해 작업이 요청되는 시간은 0 이상 1,000 이하입니다.</li>
  <li>각 작업에 대해 작업의 소요시간은 1 이상 1,000 이하입니다.</li>
  <li>하드디스크가 작업을 수행하고 있지 않을 때에는 먼저 요청이 들어온 작업부터 처리합니다.
<br /><br /><br /></li>
</ul>

<h2 id="2-알고리즘-생각해보자">2. 알고리즘! 생각해보자</h2>
<ol>
  <li>현재 요청 들어온 작업을 담는 우선순위 큐 pq, 작업 시간들의 합 answer, 작업들의 인덱스 i.</li>
  <li>작업을 요청 시간이 빠른 순으로, 요청 시간이 같을 경우 소요시간이 짧은 순으로 정렬한다.</li>
  <li>더 이상 들어올 요청이 없고, 지금까지 요청 들어온 작업도 없을 때까지 다음을 반복한다.<br />
(더 이상 들어올 요청이 없고, 지금까지 요청 들어온 작업도 없다: i == jobs.size() &amp;&amp; !pq.size())</li>
  <li>현재 요청이 들어온 작업이 없고, 요청 받을 작업이 남아있으면, 현재 시간을 해당 작업 요청 시간으로 설정하고 해당 작업을 큐에 넣어준다.<br />
(현재 요청이 들어온 작업이 없다: pq, 요청 받을 작업이 남아있다: i &lt; jobs.size(),<br />
하드디스크가 작업을 수행하고 있지 않을 때 다음에 들어올 요청을 바로 수행하기 위해서)</li>
  <li>큐에 요청이 들어온 작업이 존재하면, 제일 시간이 적게 걸리는 작업을 하나 꺼내어 현재 시간에 해당 작업 시간을 더해 작업을 끝내준다.</li>
  <li>answer에 해당 작업을 수행하는데 걸린 시간을 더해주고, 해당 작업을 수행하는 동안 들어온 요청을 큐에 넣어준다.</li>
  <li><br /><br /></li>
</ol>

<h2 id="3-해결코드">3. 해결코드</h2>
<h3 id="c">[C++]</h3>
<div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include &lt;algorithm&gt;
#include &lt;vector&gt;
#include &lt;queue&gt;
</span>
<span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>

<span class="kt">int</span> <span class="nf">solution</span><span class="p">(</span><span class="n">vector</span><span class="o">&lt;</span><span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;&gt;</span> <span class="n">jobs</span><span class="p">)</span> <span class="p">{</span>
    <span class="n">priority_queue</span><span class="o">&lt;</span><span class="n">pair</span><span class="o">&lt;</span><span class="kt">int</span><span class="p">,</span> <span class="kt">int</span><span class="o">&gt;</span><span class="p">,</span> <span class="n">vector</span><span class="o">&lt;</span><span class="n">pair</span><span class="o">&lt;</span><span class="kt">int</span><span class="p">,</span> <span class="kt">int</span><span class="o">&gt;&gt;</span><span class="p">,</span> <span class="n">greater</span><span class="o">&lt;</span><span class="n">pair</span><span class="o">&lt;</span><span class="kt">int</span><span class="p">,</span> <span class="kt">int</span><span class="o">&gt;&gt;&gt;</span> <span class="n">pq</span><span class="p">;</span>
    <span class="kt">int</span> <span class="n">answer</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
    <span class="kt">int</span> <span class="n">ms</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
    <span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
    
    <span class="n">sort</span><span class="p">(</span><span class="n">jobs</span><span class="p">.</span><span class="n">begin</span><span class="p">(),</span> <span class="n">jobs</span><span class="p">.</span><span class="n">end</span><span class="p">());</span>
    <span class="k">while</span><span class="p">(</span><span class="nb">true</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">pq</span><span class="p">.</span><span class="n">size</span><span class="p">()</span> <span class="o">&amp;&amp;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">jobs</span><span class="p">.</span><span class="n">size</span><span class="p">())</span> <span class="p">{</span>
            <span class="n">ms</span> <span class="o">=</span> <span class="n">jobs</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="mi">0</span><span class="p">];</span>
            <span class="n">pq</span><span class="p">.</span><span class="n">push</span><span class="p">(</span><span class="n">make_pair</span><span class="p">(</span><span class="n">jobs</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="mi">1</span><span class="p">],</span> <span class="n">jobs</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="mi">0</span><span class="p">]));</span>
            <span class="n">i</span><span class="o">++</span><span class="p">;</span>
        <span class="p">}</span>
        
        <span class="k">if</span><span class="p">(</span><span class="n">pq</span><span class="p">.</span><span class="n">size</span><span class="p">())</span> <span class="p">{</span>
            <span class="n">pair</span><span class="o">&lt;</span><span class="kt">int</span><span class="p">,</span> <span class="kt">int</span><span class="o">&gt;</span> <span class="n">p</span> <span class="o">=</span> <span class="n">pq</span><span class="p">.</span><span class="n">top</span><span class="p">();</span>
            <span class="n">pq</span><span class="p">.</span><span class="n">pop</span><span class="p">();</span>
            <span class="n">ms</span> <span class="o">+=</span> <span class="n">p</span><span class="p">.</span><span class="n">first</span><span class="p">;</span>
            <span class="n">answer</span> <span class="o">+=</span> <span class="n">ms</span> <span class="o">-</span> <span class="n">p</span><span class="p">.</span><span class="n">second</span><span class="p">;</span>
            <span class="k">while</span><span class="p">(</span><span class="n">i</span> <span class="o">&lt;</span> <span class="n">jobs</span><span class="p">.</span><span class="n">size</span><span class="p">()</span> <span class="o">&amp;&amp;</span> <span class="n">ms</span> <span class="o">&gt;=</span> <span class="n">jobs</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="mi">0</span><span class="p">])</span> <span class="p">{</span>
                <span class="n">pq</span><span class="p">.</span><span class="n">push</span><span class="p">(</span><span class="n">make_pair</span><span class="p">(</span><span class="n">jobs</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="mi">1</span><span class="p">],</span> <span class="n">jobs</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="mi">0</span><span class="p">]));</span>
                <span class="n">i</span><span class="o">++</span><span class="p">;</span>
            <span class="p">}</span>
        <span class="p">}</span>
        
        <span class="k">if</span> <span class="p">(</span><span class="n">i</span> <span class="o">==</span> <span class="n">jobs</span><span class="p">.</span><span class="n">size</span><span class="p">()</span> <span class="o">&amp;&amp;</span> <span class="o">!</span><span class="n">pq</span><span class="p">.</span><span class="n">size</span><span class="p">())</span> <span class="k">break</span><span class="p">;</span>
    <span class="p">}</span>
    
    <span class="k">return</span> <span class="n">answer</span><span class="o">/</span><span class="n">i</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>
<p><br /><br /><br /></p>

<h2 id="4-해결능력up-깊이-생각해보기">4. 해결능력UP, 깊이 생각해보기</h2>
<ul>
  <li><br /><br /><br /></li>
</ul>

<h2 id="5-참고해서-문제해결-٩-ᐛ-و">5. 참고해서 문제해결 ٩( ᐛ )و</h2>
<ul>
  <li><a href="https://coding-insider.tistory.com/entry/sort-사용법-priorityqueue에서의-sort-차이">https://coding-insider.tistory.com/entry/sort-사용법-priorityqueue에서의-sort-차이</a>
<br /><br /><br /></li>
</ul>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>출처: 프로그래머스 코딩 테스트 연습, https://programmers.co.kr/learn/challenges
</code></pre></div></div>

  </div><div id="disqus_thread" style="margin-top:25px"></div>
  <script>
    var disqus_config = function () {
      this.page.url = 'http://localhost:4000/%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%A8%B8%EC%8A%A4%EA%B3%A0%EB%93%9D%EC%A0%90kit/2020/07/15/%ED%9E%99_%EB%94%94%EC%8A%A4%ED%81%AC%EC%BB%A8%ED%8A%B8%EB%A1%A4%EB%9F%AC_level3.html';
      this.page.identifier = 'http://localhost:4000/%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%A8%B8%EC%8A%A4%EA%B3%A0%EB%93%9D%EC%A0%90kit/2020/07/15/%ED%9E%99_%EB%94%94%EC%8A%A4%ED%81%AC%EC%BB%A8%ED%8A%B8%EB%A1%A4%EB%9F%AC_level3.html';
    };
    (function () {
      var d = document, s = d.createElement('script');
      s.src = 'https://0pencoding.disqus.com/embed.js';
      s.setAttribute('data-timestamp', +new Date());
      (d.head || d.body).appendChild(s);
    })();
  </script>
  <noscript>Please enable JavaScript to view the <a href="https://disqus.com/?ref_noscript" rel="nofollow">comments
      powered by Disqus.</a></noscript></div>

  </section>
</main>
<script async="" src="https://www.googletagmanager.com/gtag/js?id=UA-150778693-1"></script>

<script>
window.dataLayer = window.dataLayer || [];
function gtag() { dataLayer.push(arguments); }
gtag('js', new Date());

gtag('config', 'UA-150778693-1');
</script>

:ET