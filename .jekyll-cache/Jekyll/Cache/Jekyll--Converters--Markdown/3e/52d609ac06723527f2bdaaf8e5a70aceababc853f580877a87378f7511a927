I"2-<p>본 문제는 고민을 많이 했던 문제였다. 완전탐색이기 때문에 효율성을 중요하게 생각하지 않는 알고리즘을 생각해보려고해도 어려웠었는데, 포기하고 이 다음 문제를 풀다가 키 포인트를 잡을 수 있었다. 효율성이 그렇게 좋지는 않지만, 나름 수학 공부도 되고 풀면서 재밌었던 것 같다.<br />
<br />
<br /></p>

<h2 id="1-문제">1. 문제</h2>

<p>한자리 숫자가 적힌 종이 조각이 흩어져있습니다.<br />
흩어진 종이 조각을 붙여 소수를 몇 개 만들 수 있는지 알아내려 합니다.<br />
각 종이 조각에 적힌 숫자가 적힌 문자열 numbers가 주어졌을 때, 종이 조각으로 만들 수 있는 소수가 몇 개인지 return 하도록 solution 함수를 완성해주세요.</p>

<h3 id="제한조건">제한조건</h3>

<ul>
  <li>numbers는 길이 1 이상 7 이하인 문자열입니다.</li>
  <li>numbers는 0~9까지 숫자만으로 이루어져 있습니다.</li>
  <li>013은 0, 1, 3 숫자가 적힌 종이 조각이 흩어져있다는 의미입니다.
<br /><br /><br /></li>
</ul>

<h2 id="2-알고리즘-생각해보자">2. 알고리즘! 생각해보자</h2>

<ol>
  <li>소수 2, 3의 경우는 따로 numbers에 포함 여부를 확인해 answer값을 증가시킨다.</li>
  <li>6n - 1, 6n + 1 꼴의 자연수가 소수가 맞는지 is_prime() 함수를 통해 확인한다.<br />
(소수가 맞는지는 해당 수를 (1 ~ 해당 수의 제곱근) 범위의 수들로 나눠서 딱 떨어지는 숫자가 없는 것으로 확인 가능)</li>
  <li>소수가 맞으면, numbers 카드들로 해당 소수를 만들수있는지 make_prime_number() 함수를 통해 확인한다.<br />
(소수의 숫자를 numbers에서 한개씩 찾아 없는 수가 있으면 만들 수 없는 것으로, 전부 있으면 만들 수 있는 것으로 확인)</li>
  <li>만들수 있으면 answer값을 증가시킨다.</li>
  <li>6 ~ 9999999 범위의 숫자들 중 6n - 1, 6n + 1 꼴의 자연수가 모두 반복된 후, answer를 반환한다.<br />
(numbers의 길이가 1이상 7이하라고 했으므로)<br />
<br /><br /></li>
</ol>

<h2 id="3-해결코드">3. 해결코드</h2>

<h3 id="c">[C++]</h3>

<div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
</pre></td><td class="rouge-code"><pre><span class="cp">#include &lt;string&gt;
#include &lt;vector&gt;
#include &lt;cmath&gt;
</span>
<span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>

<span class="kt">bool</span> <span class="nf">make_prime</span><span class="p">(</span><span class="n">string</span> <span class="n">numbers</span><span class="p">,</span> <span class="kt">int</span> <span class="n">prime_number</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">while</span><span class="p">(</span><span class="n">prime_number</span><span class="p">)</span> <span class="p">{</span>
        <span class="kt">int</span> <span class="n">pos</span> <span class="o">=</span> <span class="n">numbers</span><span class="p">.</span><span class="n">find</span><span class="p">(</span><span class="n">prime_number</span><span class="o">%</span><span class="mi">10</span> <span class="o">+</span> <span class="mi">48</span><span class="p">);</span>
        <span class="k">if</span> <span class="p">(</span><span class="n">pos</span> <span class="o">==</span> <span class="o">-</span><span class="mi">1</span><span class="p">)</span>
            <span class="k">return</span> <span class="nb">false</span><span class="p">;</span>
        <span class="k">else</span> <span class="p">{</span>
            <span class="n">numbers</span><span class="p">.</span><span class="n">erase</span><span class="p">(</span><span class="n">pos</span><span class="p">,</span> <span class="mi">1</span><span class="p">);</span>
            <span class="n">prime_number</span> <span class="o">/=</span> <span class="mi">10</span><span class="p">;</span>
        <span class="p">}</span>
    <span class="p">}</span>

    <span class="k">return</span> <span class="nb">true</span><span class="p">;</span>
<span class="p">}</span>

<span class="kt">bool</span> <span class="nf">is_prime</span><span class="p">(</span><span class="kt">int</span> <span class="n">prime</span><span class="p">)</span> <span class="p">{</span>
    <span class="kt">int</span> <span class="n">prime_sqrt</span> <span class="o">=</span> <span class="n">sqrt</span><span class="p">(</span><span class="n">prime</span><span class="p">);</span>

    <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">3</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;=</span> <span class="n">prime_sqrt</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
        <span class="k">if</span> <span class="p">(</span><span class="n">prime</span> <span class="o">%</span> <span class="n">i</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span> <span class="k">return</span> <span class="nb">false</span><span class="p">;</span>

    <span class="k">return</span> <span class="nb">true</span><span class="p">;</span>
<span class="p">}</span>

<span class="kt">int</span> <span class="nf">solution</span><span class="p">(</span><span class="n">string</span> <span class="n">numbers</span><span class="p">)</span> <span class="p">{</span>
    <span class="kt">int</span> <span class="n">answer</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>

    <span class="k">if</span> <span class="p">(</span><span class="n">numbers</span><span class="p">.</span><span class="n">find</span><span class="p">(</span><span class="mi">50</span><span class="p">)</span> <span class="o">!=</span> <span class="o">-</span><span class="mi">1</span><span class="p">)</span> <span class="n">answer</span><span class="o">++</span><span class="p">;</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">numbers</span><span class="p">.</span><span class="n">find</span><span class="p">(</span><span class="mi">51</span><span class="p">)</span> <span class="o">!=</span> <span class="o">-</span><span class="mi">1</span><span class="p">)</span> <span class="n">answer</span><span class="o">++</span><span class="p">;</span>
    <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">6</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;=</span> <span class="mi">9999999</span><span class="p">;</span> <span class="n">i</span> <span class="o">+=</span><span class="mi">6</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">if</span> <span class="p">(</span><span class="n">is_prime</span><span class="p">(</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span> <span class="o">&amp;&amp;</span> <span class="n">make_prime</span><span class="p">(</span><span class="n">numbers</span><span class="p">,</span> <span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="p">))</span> <span class="n">answer</span><span class="o">++</span><span class="p">;</span>
        <span class="k">if</span> <span class="p">(</span><span class="n">is_prime</span><span class="p">(</span><span class="n">i</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span> <span class="o">&amp;&amp;</span> <span class="n">make_prime</span><span class="p">(</span><span class="n">numbers</span><span class="p">,</span> <span class="n">i</span><span class="o">-</span><span class="mi">1</span><span class="p">))</span> <span class="n">answer</span><span class="o">++</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="k">return</span> <span class="n">answer</span><span class="p">;</span>
<span class="p">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p><br /><br /><br /></p>

<h2 id="4-해결능력up-깊이-생각해보기">4. 해결능력UP, 깊이 생각해보기</h2>

<ul>
  <li>문자열의 길이가 최대 7이기 때문에 결국 2부터 9999999까지 전부 돌려보는 수밖에…</li>
  <li>조금이라도 효율성을 좋기 하기 위해 “2, 3을 제외한 모든 소수는 ‘6n - 1’, ‘6n + 1’ 꼴이다”라는 소수의 특징을 사용했다</li>
  <li>어떤 숫자가 소수인지 확인하는 가장 빠른 알고리즘(으로 알고있는데 확실할진…)은 2부터 해당 숫자의 루트 값까지 1씩 증가시켜 나누어서 나눠 떨어지는 값이 없는 숫자이다</li>
  <li>stoi() 함수가 먹지를 않아서 ASCII-code를 이용했다
<br /><br /><br /></li>
</ul>

<h2 id="5-참고해서-문제해결-٩-ᐛ-و">5. 참고해서 문제해결 ٩( ᐛ )و</h2>

<ul>
  <li>[C++ 정리] 자료형의 크기 및 범위 <a href="http://myblog.opendocs.co.kr/archives/1230">http://myblog.opendocs.co.kr/archives/1230</a>
    <blockquote>
      <ul>
        <li>9999999까지의 숫자를 나타내는데 int형을 사용해도 될지 확인하기 위해 검색 → 사용 가능!</li>
      </ul>
    </blockquote>
  </li>
  <li>[Convert a string to int in C++] <a href="https://www.techiedelight.com/convert-string-to-int-cpp/">https://www.techiedelight.com/convert-string-to-int-cpp/</a>
    <blockquote>
      <ul>
        <li>string을 int형으로 나타내기위해 검색했으나 모두 에러 발생… 다른 사람들은 안그러던데 왜 이러지ㅠ</li>
      </ul>
    </blockquote>
  </li>
  <li>[ASCII code 활용 : char to int (문자형, 정수형 변환)] <a href="https://m.blog.naver.com/PostView.nhn?blogId=xxsaintxx&amp;logNo=220785227573&amp;proxyReferer=https%3A%2F%2Fwww.google.com%2F">https://m.blog.naver.com/PostView.nhn?blogId=xxsaintxx&amp;logNo=220785227573&amp;proxyReferer=https%3A%2F%2Fwww.google.com%2F</a>
    <blockquote>
      <ul>
        <li>char to int를 하기 위해서는 48을 빼면된다, 반대는 48을 더하면 되고 :)</li>
      </ul>
    </blockquote>
  </li>
  <li>[소수] <a href="https://opentutorials.org/course/1685/9469">https://opentutorials.org/course/1685/9469</a>
    <blockquote>
      <ul>
        <li>소수의 특징, “2, 3을 제외한 모든 소수는 ‘6n - 1’, ‘6n + 1’ 꼴이다”</li>
      </ul>
    </blockquote>
  </li>
  <li>[C언어/C++] pow, sqrt 함수에 대해서(루트함수, 제곱, 제곱근) <a href="https://blockdmask.tistory.com/307">https://blockdmask.tistory.com/307</a>
    <blockquote>
      <ul>
        <li>어떤 숫자의 제곱을 구하기 위해서는 sqrt() 함수 사용</li>
      </ul>
    </blockquote>
  </li>
</ul>

<p><br /><br /><br /></p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
</pre></td><td class="rouge-code"><pre>출처: 프로그래머스 코딩 테스트 연습, https://programmers.co.kr/learn/challenges
</pre></td></tr></tbody></table></code></pre></div></div>
:ET