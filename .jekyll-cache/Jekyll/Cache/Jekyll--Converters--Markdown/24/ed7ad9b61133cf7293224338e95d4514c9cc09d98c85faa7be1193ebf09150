I"û<p>Because it was the first time to solve a problem presented in English when studying algorithms, besides the competition, I was a little embarrassed. However the problem was short and the examples were out, so I wasn‚Äôt really tired. It was a little hard to figure out the problem by just looking for words that I didn‚Äôt know‚Ä¶ Well, I think it is okay because I can study English while solving the algorithm problem | ·êï)‡©≠*‚Åæ‚Åæ<br />
<br />
<br /></p>

<h2 id="1-problem">1. Problem</h2>

<p>Given an array of numbers arr.<br />
A sequence of numbers is called an arithmetic progression if the difference between any two consecutive elements is the same.</p>

<p>Return true if the array can be rearranged to form an arithmetic progression, otherwise, return false.<br />
<br /></p>

<p><strong>Example1 :</strong></p>

<blockquote>
  <p><strong>Input:</strong> arr = [3,5,1]<br />
<strong>Output:</strong> true<br />
<strong>Explanation:</strong> We can reorder the elements as [1,3,5] or [5,3,1] with differences 2 and -2 respectively, between each consecutive elements.</p>
</blockquote>

<p><br />
<strong>Example2 :</strong></p>
<blockquote>
  <p><strong>Input:</strong> arr = [1,2,4]<br />
<strong>Output:</strong> false<br />
<strong>Explanation:</strong> There is no way to reorder the elements to obtain an arithmetic progression.</p>
</blockquote>

<p><br /></p>

<h3 id="constraints">Constraints</h3>

<ul>
  <li>2 &lt;= arr.length &lt;= 1000</li>
  <li>10^6 &lt;= arr[i] &lt;= 10^6
<br /><br /><br /></li>
</ul>

<h2 id="2-thinking-algorithm">2. Thinking Algorithm</h2>

<ol>
  <li>Sort the <code class="language-plaintext highlighter-rouge">arr</code> received by parameter in ascending order.</li>
  <li>Find the difference between the first and second elements of arr. (This value is tolerance unit)</li>
  <li>Start with the second element of <code class="language-plaintext highlighter-rouge">arr</code> and check if the next element increases in tolerance unit.</li>
  <li>If it does not increase in tolerance unit, return <code class="language-plaintext highlighter-rouge">false</code>.</li>
  <li>When all elements are increased in tolerance unit, the repeating statement (for loop) ends and returns <code class="language-plaintext highlighter-rouge">true</code>.<br />
<br /><br /></li>
</ol>

<h2 id="3-solution">3. Solution</h2>

<h3 id="c">[C++]</h3>

<div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
</pre></td><td class="rouge-code"><pre><span class="k">class</span> <span class="nc">Solution</span> <span class="p">{</span>
<span class="nl">public:</span>
    <span class="kt">bool</span> <span class="n">canMakeArithmeticProgression</span><span class="p">(</span><span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;&amp;</span> <span class="n">arr</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">sort</span><span class="p">(</span><span class="n">arr</span><span class="p">.</span><span class="n">begin</span><span class="p">(),</span> <span class="n">arr</span><span class="p">.</span><span class="n">end</span><span class="p">());</span>

        <span class="kt">int</span> <span class="n">diff</span> <span class="o">=</span> <span class="n">arr</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">-</span> <span class="n">arr</span><span class="p">[</span><span class="mi">0</span><span class="p">];</span>
        <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">arr</span><span class="p">.</span><span class="n">size</span><span class="p">()</span> <span class="o">-</span> <span class="mi">1</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
            <span class="k">if</span> <span class="p">(</span><span class="n">arr</span><span class="p">[</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="p">]</span> <span class="o">-</span> <span class="n">arr</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">!=</span> <span class="n">diff</span><span class="p">)</span> <span class="k">return</span> <span class="nb">false</span><span class="p">;</span>
        <span class="p">}</span>

        <span class="k">return</span> <span class="nb">true</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">};</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p><br /><br /></p>

<h2 id="4-to-think-deeper">4. To Think Deeper</h2>

<ul>
  <li>The point is that sorting arr at first.
<br /><br /><br /></li>
</ul>

<h2 id="5-reference-Ÿ©-·êõ-Ÿà">5. Reference Ÿ©( ·êõ )Ÿà</h2>

<ul>
  <li>Nothing ¬ØÔºº<em>(„ÉÑ)</em>/¬Ø</li>
</ul>

<p><br /><br /><br /></p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
</pre></td><td class="rouge-code"><pre>Ï∂úÏ≤ò: LeetCode Contest, https://leetcode.com/contest/
</pre></td></tr></tbody></table></code></pre></div></div>
:ET