I"U<p>난이도 ★ ☆ ☆ ☆ ☆</p>

<p><br />
<br /></p>

<h2 id="1-problem">1. Problem</h2>
<p>Given an array of numbers arr.<br />
A sequence of numbers is called an arithmetic progression if the difference between any two consecutive elements is the same.</p>

<p>Return true if the array can be rearranged to form an arithmetic progression, otherwise, return false.<br />
<br /></p>

<p><strong>Example1 :</strong></p>
<blockquote>
  <p><strong>Input:</strong> arr = [3,5,1]<br />
<strong>Output:</strong> true<br />
<strong>Explanation:</strong> We can reorder the elements as [1,3,5] or [5,3,1] with differences 2 and -2 respectively, between each consecutive elements.<br />
<br /></p>
</blockquote>

<p><strong>Example2 :</strong></p>
<blockquote>
  <p><strong>Input:</strong> arr = [1,2,4]<br />
<strong>Output:</strong> false<br />
<strong>Explanation:</strong> There is no way to reorder the elements to obtain an arithmetic progression.<br />
<br /></p>
</blockquote>

<h3 id="constraints">Constraints</h3>
<ul>
  <li>2 &lt;= arr.length &lt;= 1000</li>
  <li>10^6 &lt;= arr[i] &lt;= 10^6
<br /><br /><br /></li>
</ul>

<h2 id="2-thinking-algorithm">2. Thinking Algorithm</h2>
<ol>
  <li>스테이지-해당 스테이지의 실패율 쌍을 원소로하는 벡터 stage_frate와 answer 벡터를 생성한다.</li>
  <li>스테이지를 나타내는 i를 1부터 N까지 반복하면서 해당 스테이지에 도달한 플레이어 수(reach_player)와,<br />
스테이지에 도달했으나 아직 클리어하지 못한 플레이어 수(nclear_player)를 구한다.</li>
  <li>구한 reach_player, nclear_player 값을 나눠 실패율을 구하고 해당 스테이지-실패율 stage_frate 쌍을 벡터에 push한다.<br />
(reach_player가 0인 경우 분모가 0이 되고 문제의 제한조건에 의해 실패율은 0으로 정의한다)</li>
  <li>반복문이 끝나면 stage_frate 함수를 내가 정의한 compare 함수에 따라 정렬한다.<br />
(compare 함수는 실패율을 기준으로 실패율 높은 순서대로, 실패율이 같을 경우 스테이지가 낮은 순서대로 정렬)</li>
  <li>정렬된 stage_frate 벡터를 반복하며 스테이지만 answer 벡터에 push한다.</li>
  <li>stage_frate 벡터의 반복이 끝나면, answer를 반환한다.<br />
<br /><br /></li>
</ol>

<h2 id="3-solution">3. Solution</h2>
<h3 id="c">[C++]</h3>
<div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">Solution</span> <span class="p">{</span>
<span class="nl">public:</span>
    <span class="kt">bool</span> <span class="n">canMakeArithmeticProgression</span><span class="p">(</span><span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;&amp;</span> <span class="n">arr</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">sort</span><span class="p">(</span><span class="n">arr</span><span class="p">.</span><span class="n">begin</span><span class="p">(),</span> <span class="n">arr</span><span class="p">.</span><span class="n">end</span><span class="p">());</span>
        
        <span class="kt">int</span> <span class="n">diff</span> <span class="o">=</span> <span class="n">arr</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">-</span> <span class="n">arr</span><span class="p">[</span><span class="mi">0</span><span class="p">];</span>
        <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">arr</span><span class="p">.</span><span class="n">size</span><span class="p">()</span> <span class="o">-</span> <span class="mi">1</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
            <span class="k">if</span> <span class="p">(</span><span class="n">arr</span><span class="p">[</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="p">]</span> <span class="o">-</span> <span class="n">arr</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">!=</span> <span class="n">diff</span><span class="p">)</span> <span class="k">return</span> <span class="nb">false</span><span class="p">;</span>
        <span class="p">}</span>
        
        <span class="k">return</span> <span class="nb">true</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">};</span>
</code></pre></div></div>
<p><br /><br /><br /></p>

<h2 id="4-해결능력up-깊이-생각해보기">4. 해결능력UP, 깊이 생각해보기</h2>
<ul>
  <li>벡터 정렬할 때, 내가 직접 생성한 함수 기준으로 정렬하는데, 정렬 기준이 두 개인 경우 유의하기
<br /><br /><br /></li>
</ul>

<h2 id="5-reference-٩-ᐛ-و">5. Reference ٩( ᐛ )و</h2>
<ul>
  <li>[C++] sort algorithm 정리 및 예시 <a href="https://blockdmask.tistory.com/178">https://blockdmask.tistory.com/178</a><br />
사용자 정의 함수를 기준으로 정렬할 경우 sort()의 세번째 파라미터로 해당 변수를 넣어주고, 정렬 기준이 두 개인 경우 사용자 정의 함수에 1순위 정렬 기준이 같을 경우 2순위 정렬 기준으로 정렬한다는 내용을 담아서 사용
<br /><br /><br /></li>
</ul>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>출처: LeetCode Contest, https://leetcode.com/contest/
</code></pre></div></div>
:ET